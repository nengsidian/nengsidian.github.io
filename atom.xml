<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>李恒的博客</title>
  
  <subtitle>记录知识，带来成长</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-05-16T02:14:55.041Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>liheng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mongodb常规操作</title>
    <link href="http://yoursite.com/2020/05/16/databases/mongodb%E5%B8%B8%E8%A7%84%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2020/05/16/databases/mongodb%E5%B8%B8%E8%A7%84%E6%93%8D%E4%BD%9C/</id>
    <published>2020-05-16T01:05:57.000Z</published>
    <updated>2020-05-16T02:14:55.041Z</updated>
    
    <content type="html"><![CDATA[<p>###一、数据库和集合的相关操作 </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 查看当前数据库</span><br><span class="line">db </span><br><span class="line"></span><br><span class="line"># 查看所有的数据库</span><br><span class="line">show dbs </span><br><span class="line">show databases </span><br><span class="line"></span><br><span class="line"># 查看集合</span><br><span class="line">show collections</span><br><span class="line"></span><br><span class="line"># 切换数据库</span><br><span class="line">use 数据库名字 </span><br><span class="line"></span><br><span class="line"># 删除当前数据库</span><br><span class="line">db.dropDatabase() </span><br><span class="line"></span><br><span class="line"># 删除集合</span><br><span class="line">db.集合名称.drop() </span><br><span class="line"></span><br><span class="line"># 手动创建集合 </span><br><span class="line"># db.createCollection(name,options) </span><br><span class="line">db.createCollection("stu") </span><br><span class="line">db.createCollection("sub,&#123;capped:true,size:10&#125;)</span><br></pre></td></tr></table></figure><ul><li><p>参数capped： 默认值为false表示不设置上限,值为true表示设置上限 </p></li><li><p>参数size： 当capped值为true时， 需要指定此参数， 表示上限⼤⼩,当⽂档达到上限时， 会将之前的数据覆盖， 单位为字节 </p></li></ul><p>注意：数据库和集合都不需要手动创建，添加数据时都会被自动创建出来，但是集合也可以手动创建 </p><p>###二、数据库的增删改查</p><p>集合名称：stu</p><p>####插入insert</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 插入</span><br><span class="line">db.stu.insert(&#123;name:'gt',gender:1&#125;)</span><br><span class="line">db.stu.insert(&#123;_id:"20170101",name:'gj',gender:1&#125;)</span><br><span class="line"></span><br><span class="line"># 批量插入</span><br><span class="line">db.t254.insertMany(</span><br><span class="line">    [</span><br><span class="line">        &#123; <span class="attr">"country"</span> : <span class="string">"china"</span>, <span class="attr">"province"</span> : <span class="string">"sh"</span>, <span class="attr">"userid"</span> : <span class="string">"a"</span> &#125;,</span><br><span class="line">        &#123;  <span class="attr">"country"</span> : <span class="string">"china"</span>, <span class="attr">"province"</span> : <span class="string">"sh"</span>, <span class="attr">"userid"</span> : <span class="string">"b"</span> &#125;,</span><br><span class="line">        &#123;  <span class="attr">"country"</span> : <span class="string">"china"</span>, <span class="attr">"province"</span> : <span class="string">"sh"</span>, <span class="attr">"userid"</span> : <span class="string">"a"</span> &#125;,</span><br><span class="line">        &#123;  <span class="attr">"country"</span> : <span class="string">"china"</span>, <span class="attr">"province"</span> : <span class="string">"sh"</span>, <span class="attr">"userid"</span> : <span class="string">"c"</span> &#125;,</span><br><span class="line">        &#123;  <span class="attr">"country"</span> : <span class="string">"china"</span>, <span class="attr">"province"</span> : <span class="string">"bj"</span>, <span class="attr">"userid"</span> : <span class="string">"da"</span> &#125;,</span><br><span class="line">        &#123;  <span class="attr">"country"</span> : <span class="string">"china"</span>, <span class="attr">"province"</span> : <span class="string">"bj"</span>, <span class="attr">"userid"</span> : <span class="string">"fa"</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>•插⼊⽂档时， 如果不指定_id参数，MongoDB会为⽂档分配⼀个唯⼀的ObjectId</li><li>用insert插入时，如果id已存在则会报错</li></ul><p>####保存save</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 保存</span><br><span class="line">db.stu.save(&#123;name:'gt',gender:2&#125;)  # 新增</span><br><span class="line">db.stu.save(&#123;_id:"20170101",name:'gj',gender:1&#125;)  # id已存在，则更新</span><br></pre></td></tr></table></figure><ul><li>如果⽂档的_id已经存在则修改，如果⽂档的_id不存在则添加</li></ul><p>注意：</p><ul><li>db.collecion.insert({}) 插入数据，<code>_id</code>存在就报错  </li><li>db.collection.save({}) 插入数据，<code>_id</code>存在会更新</li></ul><h4 id="更新update"><a href="#更新update" class="headerlink" title="更新update"></a>更新update</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 更新</span><br><span class="line">db.集合名称.update(&lt;query&gt; ,&lt;update&gt;,&#123;multi:&lt;boolean&gt;&#125;)</span><br><span class="line"># 参数query:查询条件</span><br><span class="line"># 参数update:更新操作符</span><br><span class="line"># 参数multi:可选， 默认是false，表示只更新找到的第⼀条记录， 值为true表示把满⾜条件的⽂档全部更新</span><br><span class="line"></span><br><span class="line">db.stu.update(&#123;name:'hr'&#125;,&#123;name:'mnc'&#125;)   # 更新一条，替换覆盖</span><br><span class="line">db.stu.update(&#123;name:'hr'&#125;,&#123;$set:&#123;name:'hys'&#125;&#125;)    # 更新一条</span><br><span class="line">db.stu.update(&#123;&#125;,&#123;$set:&#123;gender:0&#125;&#125;,&#123;multi:true&#125;)   # 更新全部</span><br></pre></td></tr></table></figure><p>注意：”multi update only works with $ operators”</p><h4 id="删除remove"><a href="#删除remove" class="headerlink" title="删除remove"></a>删除remove</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.集合名称.remove(&lt;query&gt;,&#123;justOne: &lt;boolean&gt;&#125;)</span><br><span class="line"></span><br><span class="line"># 参数query:可选，删除的⽂档的条件</span><br><span class="line"># 参数justOne:可选， 如果设为true或1， 则只删除⼀条， 默认false， 表示删除多条</span><br></pre></td></tr></table></figure><h4 id="查询find"><a href="#查询find" class="headerlink" title="查询find"></a>查询find</h4><p>普通查询：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 查询</span><br><span class="line">db.stu.find(&#123;条件文档&#125;)</span><br><span class="line"></span><br><span class="line"># 查询，只返回一个结果</span><br><span class="line">db.stu.findOne(&#123;条件文档&#125;)</span><br><span class="line"></span><br><span class="line"># 将查询结果格式化(方便查看)</span><br><span class="line">db.stu.find(&#123;条件文档&#125;</span><br></pre></td></tr></table></figure><p>比较运算符：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 小于 $lt [less than]</span><br><span class="line">db.stu.find(&#123;age:&#123;$lt:18&#125;&#125;)</span><br><span class="line"></span><br><span class="line"># 小于等于 $lte [less than equal]</span><br><span class="line">db.stu.find(&#123;age:&#123;$lte:18&#125;&#125;)</span><br><span class="line"></span><br><span class="line"># 大于 $gt [greater than]</span><br><span class="line">db.stu.find(&#123;age:&#123;$gt:18&#125;&#125;)</span><br><span class="line"></span><br><span class="line"># 大于等于 $gte [greater than equal]</span><br><span class="line">db.stu.find(&#123;age:&#123;$gte:18&#125;&#125;)</span><br><span class="line"></span><br><span class="line"># 不等于 $ne</span><br><span class="line">db.stu.find(&#123;age:&#123;$ne:18&#125;&#125;)</span><br></pre></td></tr></table></figure><p>逻辑运算符</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># and 在json中写多个条件即可</span><br><span class="line"># 查询年龄大于等于18，并且性别为true的学生</span><br><span class="line">db.stu.find(&#123;age:&#123;$gte:18&#125;,gender:true&#125;)</span><br><span class="line"></span><br><span class="line"># or:使⽤$or， 值为数组 数组中每个元素为json</span><br><span class="line"># 查询年龄⼤于18， 或性别为false的学⽣</span><br><span class="line">db.stu.find(&#123;$or:[&#123;age:&#123;$gt:18&#125;&#125;,&#123;gender:false&#125;]&#125;)</span><br><span class="line"></span><br><span class="line"># 查询年龄⼤于18或性别为男⽣， 并且姓名是郭靖</span><br><span class="line">db.stu.find(&#123;$or:[&#123;age:&#123;$gt:18&#125;&#125;,&#123;gender:true&#125;],name:"郭靖"&#125;)</span><br></pre></td></tr></table></figure><h4 id="范围运算符"><a href="#范围运算符" class="headerlink" title="范围运算符"></a>范围运算符</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 使⽤"$in"， "$nin" 判断是否在某个范围内</span><br><span class="line"># 查询年龄为18、 28的学⽣</span><br><span class="line"># $in 在范围内</span><br><span class="line">db.stu.find(&#123;age:&#123;$in:[18,28]&#125;&#125;)</span><br><span class="line"># $nin 不在范围内</span><br><span class="line">db.collection.find(&#123;name:&#123;$nin:["a","b","c"]&#125;&#125;)</span><br></pre></td></tr></table></figure><h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 使⽤//或$regex编写正则表达式</span><br><span class="line"># 查询姓⻩的学⽣</span><br><span class="line">db.stu.find(&#123;name:/^⻩/&#125;)</span><br><span class="line">db.stu.find(&#123;name:&#123;$regex:'^⻩'&#125;&#125;)</span><br></pre></td></tr></table></figure><h4 id="limit和skip"><a href="#limit和skip" class="headerlink" title="limit和skip"></a>limit和skip</h4><ul><li>limit(): ⽤于读取指定数量的⽂档</li><li>skip(): ⽤于跳过指定数量的⽂档</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># db.集合名称.find().limit(NUMBER)</span><br><span class="line"># 查询2条学⽣信息</span><br><span class="line">db.stu.find().limit(2)</span><br><span class="line"></span><br><span class="line"># db.集合名称.find().skip(NUMBER)</span><br><span class="line">db.stu.find().skip(2)</span><br><span class="line"></span><br><span class="line"># 同时使用</span><br><span class="line">db.stu.find().limit(4).skip(5)</span><br><span class="line"># 或 </span><br><span class="line">db.stu.find().skip(5).limit(4)</span><br></pre></td></tr></table></figure><h4 id="自定义查询"><a href="#自定义查询" class="headerlink" title="自定义查询"></a>自定义查询</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 使⽤$where后⾯写⼀个函数， 返回满⾜条件的数据，查询年龄⼤于30的学⽣</span><br><span class="line">db.stu.find(&#123;</span><br><span class="line">    $where:function() &#123;</span><br><span class="line">        return this.age&gt;30;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="投影"><a href="#投影" class="headerlink" title="投影"></a>投影</h4><p>在查询到的返回结果中， 只选择必要的字段</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># db.集合名称.find(&#123;&#125;,&#123;字段名称:1,...&#125;)</span><br><span class="line"># 参数为字段与值， 值为1表示显示， 值为0不显</span><br><span class="line"># 特殊： 对于_id列默认是显示的， 如果不显示需要明确设置为0</span><br><span class="line"># 除了_id之外的其他字段，如果不显示，不写，不能写为0</span><br><span class="line">db.stu.find(&#123;&#125;,&#123;_id:0,name:1,gender:1&#125;)</span><br></pre></td></tr></table></figure><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><p>⽅法sort()， ⽤于对  集进⾏排序</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># db.集合名称.find().sort(&#123;字段:1,...&#125;)</span><br><span class="line"># 参数1为升序排列</span><br><span class="line"># 参数-1为降序排列</span><br><span class="line"># 根据性别降序， 再根据年龄升序</span><br><span class="line">db.stu.find().sort(&#123;gender:-1,age:1&#125;)</span><br></pre></td></tr></table></figure><h4 id="统计个数"><a href="#统计个数" class="headerlink" title="统计个数"></a>统计个数</h4><p>⽅法count()⽤于统计结果集中⽂档条数</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># db.集合名称.find(&#123;条件&#125;).count()</span><br><span class="line"># db.集合名称.count(&#123;条件&#125;)</span><br><span class="line">db.stu.find(&#123;gender:true&#125;).count()</span><br><span class="line">db.stu.count(&#123;age:&#123;$gt:20&#125;,gender:true&#125;)</span><br></pre></td></tr></table></figure><h4 id="消除重复"><a href="#消除重复" class="headerlink" title="消除重复"></a>消除重复</h4><p>⽅法distinct()对数据进⾏去重</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># db.集合名称.distinct('去重字段',&#123;条件&#125;)</span><br><span class="line">db.stu.distinct('hometown',&#123;age:&#123;$gt:18&#125;&#125;)</span><br><span class="line"></span><br><span class="line"># 结果返回的是数组</span><br><span class="line">[ <span class="string">"蒙古"</span>, <span class="string">"桃花岛"</span>, <span class="string">"⼤理"</span> ]</span><br></pre></td></tr></table></figure><h3 id="三、聚合aggregate"><a href="#三、聚合aggregate" class="headerlink" title="三、聚合aggregate"></a>三、聚合aggregate</h3><p>聚合(aggregate)是基于数据处理的聚合管道，每个文档通过一个由多个阶段（stage）组成的管道，可以对每个阶段的管道进行分组、过滤等功能，然后经过一系列的处理，输出相应的结果。 </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.集合名称.aggregate(&#123;管道:&#123;表达式&#125;&#125;)</span><br></pre></td></tr></table></figure><h4 id="常用管道"><a href="#常用管道" class="headerlink" title="常用管道"></a>常用管道</h4><p>在mongodb中，⽂档处理完毕后， 通过管道进⾏下⼀次处理</p><p>常用管道如下：</p><ul><li><p>$group： 将集合中的⽂档分组， 可⽤于统计结果</p></li><li><p>$match： 过滤数据， 只输出符合条件的⽂档</p></li><li><p>$project： 修改输⼊⽂档的结构， 如重命名、 增加、 删除字段、 创建计算结果</p></li><li><p>$sort： 将输⼊⽂档排序后输出</p></li><li><p>$limit： 限制聚合管道返回的⽂档数</p></li><li><p>$skip： 跳过指定数量的⽂档， 并返回余下的⽂档</p></li><li><p>$unwind： 将数组类型的字段进⾏拆分</p></li></ul><h4 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h4><p>处理输⼊⽂档并输出</p><p>语法：表达式:’$列名’</p><p>常⽤表达式:</p><ul><li><p>$sum： 计算总和， $sum:1 表示以⼀倍计数</p></li><li><p>$avg： 计算平均值</p></li><li><p>$min： 获取最⼩值</p></li><li><p>$max： 获取最⼤值</p></li><li><p>$push： 在结果⽂档中插⼊值到⼀个数组中</p></li><li><p>$first： 根据资源⽂档的排序获取第⼀个⽂档数据</p></li><li><p>$last： 根据资源⽂档的排序获取最后⼀个⽂档数据</p></li></ul><h4 id="group"><a href="#group" class="headerlink" title="$group"></a>$group</h4><ul><li>将集合中的文档分组，可用于统计结果</li><li>_id表示分组的依据，使用某个字段的格式为’$字段’</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 例1：统计男生、女生的总人数</span><br><span class="line">db.stu.aggregate(</span><br><span class="line">&#123;$group:</span><br><span class="line">     &#123;</span><br><span class="line">         _id:'$gender',</span><br><span class="line">         counter:&#123;$sum:1&#125;</span><br><span class="line">     &#125;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>将集合中所有的文档分为一组</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 例2：求学生总人数，平均年龄</span><br><span class="line">db.stu.aggregate(</span><br><span class="line">    &#123;$group:</span><br><span class="line">        &#123;</span><br><span class="line">            _id:null,</span><br><span class="line">            counter:&#123;$sum:1&#125;,</span><br><span class="line">            avgAge:&#123;$avg:'$age'&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>对多个字段同时进行分组</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">db.t254.aggregate(</span><br><span class="line">    &#123;$group:</span><br><span class="line">     &#123;</span><br><span class="line">         _id:&#123;country:'$country',province:'$province',userid:'$userid'&#125;,</span><br><span class="line">         count:&#123;$sum:1&#125;</span><br><span class="line">     &#125;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h5 id="group注意点"><a href="#group注意点" class="headerlink" title="$group注意点"></a>$group注意点</h5><ul><li><code>$group</code>对应的字典中有几个键，结果中就有几个键</li><li>分组依据需要放到<code>_id</code>后面</li><li>取不同的字段的值需要使用$,$gender , $age</li><li>取字典嵌套的字典中的值的时候<code>$_id.country</code></li><li>能够同时按照多个键进行分组<code>{$group:{_id:{country:&quot;$country&quot;,province:&quot;$province&quot;}}}</code><ul><li>结果是：<code>{_id:{country:&quot;&quot;,province:&quot;&quot;}</code></li></ul></li></ul><h4 id="透视数据-push"><a href="#透视数据-push" class="headerlink" title="透视数据 push"></a>透视数据 push</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 统计不同性别的学生姓名</span><br><span class="line">db.stu.aggregate(</span><br><span class="line">    &#123;$group:</span><br><span class="line">     &#123;</span><br><span class="line">         _id:'$gender',</span><br><span class="line">         name:&#123;$push:'$name'&#125;</span><br><span class="line">     &#125;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>使用$$ROOT可以将文档内容加入到结果集的数组中</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">db.stu.aggregate(</span><br><span class="line">    &#123;$group:</span><br><span class="line">     &#123;</span><br><span class="line">         _id:'$gender',</span><br><span class="line">         name:&#123;$push:'$$ROOT'&#125;</span><br><span class="line">     &#125;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="match"><a href="#match" class="headerlink" title="match"></a>match</h4><ul><li><p>用于过滤数据，只输出符合条件的文档</p></li><li><p>使用MongoDB的标准查询操作</p></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 查询年龄大于20的学生</span><br><span class="line">db.stu.aggregate(</span><br><span class="line">&#123;$match:&#123;age:&#123;$gt:20&#125;&#125;&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"># 查询年龄大于16的男生、女生人数</span><br><span class="line">db.stu.aggregate(</span><br><span class="line">    &#123;$match:&#123;age:&#123;$gt:16&#125;&#125;&#125;,</span><br><span class="line">    &#123;$group:&#123;_id:'$gender',count:&#123;$sum:1&#125;&#125;&#125;,</span><br><span class="line">    &#123;$project:&#123;gender:'$_id',count:1,_id:0&#125;&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="project"><a href="#project" class="headerlink" title="project"></a>project</h4><ul><li>修改输入文档的结构，如重命名、增加、删除字段、创建计算结果</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 查询学生的姓名、年龄</span><br><span class="line">db.stu.aggregate(</span><br><span class="line">    &#123;$project:&#123;_id:0,name:1,age:1&#125;&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"># 查询男生、女生人数，输出人数</span><br><span class="line">db.stu.aggregate(</span><br><span class="line">    &#123;$group:&#123;_id:'$gender',count:&#123;$sum:1&#125;&#125;&#125;,</span><br><span class="line">    &#123;$project:&#123;gender:'$_id',count:1,_id:0&#125;&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><p>{ “country” : “china”, “province” : “sh”, “userid” : “a” }  </p><p>{  “country” : “china”, “province” : “sh”, “userid” : “b” }  </p><p>{  “country” : “china”, “province” : “sh”, “userid” : “a” }  </p><p>{  “country” : “china”, “province” : “sh”, “userid” : “c” }  </p><p>{  “country” : “china”, “province” : “bj”, “userid” : “da” }  </p><p>{  “country” : “china”, “province” : “bj”, “userid” : “fa” }  </p><p>需求：统计出每个country/province下的userid的数量（同一个userid只统计一次）,结果中的字段为{country:”**“，province:”**“，counter:”**“}</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">db.t254.aggregate(</span><br><span class="line">&#123;$group:&#123;_id:&#123;'country':'$country','province':'$province','userid':'$userid'&#125;&#125;&#125;,</span><br><span class="line">&#123;$group:&#123;_id:&#123;country:"$_id.country",province:"$_id.province"&#125;,count:&#123;$sum:1&#125;&#125;&#125;,</span><br><span class="line">&#123;$project:&#123;country:"$_id.country",province:"$_id.province",count:1,_id:0&#125;&#125;</span><br><span class="line">)</span><br><span class="line"># 第一个group是去重userid相同的内容</span><br><span class="line"># 第二个group是进行分组统计</span><br><span class="line"># 第三个project是修改输出结果文档结构</span><br></pre></td></tr></table></figure><h4 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h4><ul><li>将输入文档排序后输出</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 查询学生信息，按年龄升序</span><br><span class="line">db.stu.aggregate(&#123;$sort:&#123;age:1&#125;&#125;)</span><br><span class="line"></span><br><span class="line"># 查询男生、女生人数，按人数降序</span><br><span class="line">db.stu.aggregate(</span><br><span class="line">    &#123;$group:&#123;_id:'$gender',count:&#123;$sum:1&#125;&#125;&#125;,</span><br><span class="line">    &#123;$sort:&#123;count:-1&#125;&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="limit和-skip"><a href="#limit和-skip" class="headerlink" title="$limit和$skip"></a>$limit和$skip</h4><p>limit</p><ul><li>限制聚合管道返回的文档数</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查询2条学生信息</span><br><span class="line">db.stu.aggregate(&#123;$limit:2&#125;)</span><br></pre></td></tr></table></figure><p>skip</p><ul><li>跳过指定数量的文档，并返回余下的文档</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 查询从第3条开始的学生信息</span><br><span class="line">db.stu.aggregate(&#123;$skip:2&#125;)</span><br><span class="line"></span><br><span class="line"># 统计男生、女生人数，按人数升序，取第二条数据</span><br><span class="line">db.stu.aggregate(</span><br><span class="line">    &#123;$group:&#123;_id:'$gender',count:&#123;$sum:1&#125;&#125;&#125;,</span><br><span class="line">    &#123;$sort:&#123;count:1&#125;&#125;,</span><br><span class="line">    &#123;$skip:1&#125;,</span><br><span class="line">    &#123;$limit:1&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>#####注意顺序：先写skip，再写limit，这样性能更好。</p><h4 id="unwind"><a href="#unwind" class="headerlink" title="$unwind"></a>$unwind</h4><ul><li>将⽂档中的某⼀个数组类型字段拆分成多条， 每条包含数组中的⼀个值</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 语法：db.集合名称.aggregate(&#123;$unwind:'$字段名称'&#125;)</span><br><span class="line">db.t2.insert(&#123;_id:1,item:'t-shirt',size:['S','M','L']&#125;)</span><br><span class="line">db.t2.aggregate(&#123;$unwind:'$size'&#125;)</span><br><span class="line"></span><br><span class="line"># 结果如下：</span><br><span class="line">&#123; <span class="attr">"_id"</span> : <span class="number">1</span>, <span class="attr">"item"</span> : <span class="string">"t-shirt"</span>, <span class="attr">"size"</span> : <span class="string">"S"</span> &#125;</span><br><span class="line">&#123; <span class="attr">"_id"</span> : <span class="number">1</span>, <span class="attr">"item"</span> : <span class="string">"t-shirt"</span>, <span class="attr">"size"</span> : <span class="string">"M"</span> &#125;</span><br><span class="line">&#123; <span class="attr">"_id"</span> : <span class="number">1</span>, <span class="attr">"item"</span> : <span class="string">"t-shirt"</span>, <span class="attr">"size"</span> : <span class="string">"L"</span> &#125;</span><br></pre></td></tr></table></figure><p>unwind练习</p><p>数据库中有一条数据：{“username”:”Alex”,”tags”:[‘C#’,’Java’,’C++’]}，如何获取该tag列表的长度？</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">db.a1.aggregate(</span><br><span class="line">&#123;$unwind:'$tags'&#125;,</span><br><span class="line">    &#123;$group:&#123;_id:'$username',count:&#123;$sum:1&#125;&#125;&#125;,</span><br><span class="line">    &#123;$project:&#123;username:'$_id',count:1,_id:0&#125;&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>以上例子中，当集合中有多条数据，并且，有部分数据的tags为’’或null时，整条数据会被丢弃，如果不想丢弃，此时需要添加：preserveNullAndEmptyArrays<ul><li>属性  值为false表示丢弃属性值为空的⽂档（默认）</li><li>属性preserveNullAndEmptyArrays值为true表示保留属性值为空的⽂档</li></ul></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">db.inventory.aggregate(</span><br><span class="line">    &#123;$unwind:</span><br><span class="line">     &#123;</span><br><span class="line">         path:'$字段名称',</span><br><span class="line">         preserveNullAndEmptyArrays:&lt;boolean&gt; # 防止数据丢失</span><br><span class="line">     &#125;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>###创建索引</p><p>索引：以提升查询速度</p><p>db.集合.ensureIndex({属性:1})</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 测试：插入10万条数据到数据库中</span><br><span class="line">for(i=0;i&lt;100000;i++)&#123;db.t1.insert(&#123;name:'test'+i,age:i&#125;)&#125;</span><br><span class="line"></span><br><span class="line">db.t1.find(&#123;name:'test10000'&#125;)</span><br><span class="line">db.t1.find(&#123;name:'test10000'&#125;).explain('executionStats') # 显示查询时间</span><br><span class="line"></span><br><span class="line"># 建立索引之后对比：</span><br><span class="line"># 建立语法：</span><br><span class="line">db.集合.ensureIndex(&#123;属性:1&#125;) # 1表示升序， -1表示降序</span><br><span class="line"># 升序与降序在平时查询时并无区别，只有在升级或降序排序时才有影响，即：展示时升序用的多就用1，降序用的多就用-1，如果不用升序和降序，1和-1随便选。</span><br><span class="line"># 具体操作：</span><br><span class="line">db.t1.ensureIndex(&#123;name:1&#125;)</span><br><span class="line">db.t1.find(&#123;name:'test10000'&#125;).explain('executionStats')</span><br></pre></td></tr></table></figure><ul><li><p>#####在默认情况下创建的索引均不是唯一索引。</p></li><li><p>#####默认是以id为索引</p></li><li><p>#####创建唯一索引:</p><ul><li>db.t1.ensureIndex({“name”:1},{“unique”:true})</li></ul></li><li><p>#####创建唯一索引并消除重复：</p><ul><li>db.t1.ensureIndex({“name”:1},{“unique”:true,”dropDups”:true})  </li></ul></li><li><p>#####建立联合索引(什么时候需要联合索引)：</p><ul><li>需要通过多个键一起确定唯一值时</li><li>db.t1.ensureIndex({name:1,age:1})</li><li>db.collection.ensureIndex({name：1，age:1},{unique:ture})</li></ul></li><li><p>#####查看当前集合的所有索引：</p><ul><li>db.t1.getIndexes()</li></ul></li><li><p>#####删除索引：</p><ul><li>db.t1.dropIndex(‘索引名称’)</li></ul></li></ul><p>###数据的备份和恢复</p><p>备份的语法：</p><p>​    mongodump -h dbhost -d dbname -o dbdirectory</p><p>-h： 服务器地址， 也可以指定端⼝号</p><p>-d： 需要备份的数据库名称</p><p>-o： 备份的数据存放位置， 此⽬录中存放着备份出来的数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongodump -h 192.168.196.128:27017 -d test1 -o ~/Desktop/test1bak</span><br></pre></td></tr></table></figure><p>恢复语法：</p><p>​     mongorestore -h dbhost -d dbname –dir dbdirectory</p><p>-h： 服务器地址</p><p>-d： 需要恢复的数据库实例</p><p>–dir： 备份数据所在位置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongorestore -h 192.168.196.128:27017 -d test2 --dir ~/Desktop/test1bak/test1</span><br></pre></td></tr></table></figure><h4 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h4><p>尝试将我电脑中的douban.tv1中的数据恢复到自己的电脑中，具体如何操作？</p><p>完成上述操作后完成以下问题：</p><p>1.获取每条数据中的title，count(所有评分人数),rate(评分),country(国家)的这些字段</p><p>2.获取上述结果中的不同国家电视剧的数据量</p><p>3.获取上述结果中分数大于8分的不同国家电视剧的数据量</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">db.tv1.aggregate(</span><br><span class="line">    &#123;$project:&#123;title:1,count:'$rating.count',score:'$rating.value',country:'$tv_category',_id:0&#125;&#125;,</span><br><span class="line">    &#123;$match:&#123;score:&#123;$gt:8&#125;&#125;&#125;,</span><br><span class="line">    &#123;$group:&#123;_id:'$country',count:&#123;$sum:1&#125;&#125;&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="pymongo"><a href="#pymongo" class="headerlink" title="pymongo"></a>pymongo</h3><h5 id="实例化和插入"><a href="#实例化和插入" class="headerlink" title="实例化和插入"></a>实例化和插入</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestMongo</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        client = MongoClient(host=<span class="string">"127.0.0.1"</span>, port=<span class="number">27017</span>)  <span class="comment"># 本机括号里可以不填</span></span><br><span class="line">        self.collection = client[<span class="string">"test"</span>][<span class="string">"t1"</span>]  <span class="comment"># 使用方括号的方式选择数据库和集合</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_insert</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># insert接收字典，返回objectId</span></span><br><span class="line">        ret = self.collection.insert(&#123;<span class="string">"name"</span>: <span class="string">"test10010"</span>, <span class="string">"age"</span>: <span class="number">33</span>&#125;)</span><br><span class="line">        print(ret)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_insert_many</span><span class="params">(self)</span>:</span></span><br><span class="line">        item_list = [&#123;<span class="string">"name"</span>: <span class="string">"test1000&#123;&#125;"</span>.format(i)&#125; <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line">        <span class="comment"># insert_many接收一个列表，列表中为所有需要插入的字典</span></span><br><span class="line">        t = self.collection.insert_many(item_list)</span><br><span class="line">        <span class="comment"># t.inserted_ids为所有插入的id</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> t.inserted_ids:</span><br><span class="line">            print(i)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">try_find_one</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># find_one查找并且返回一个结果，接收一个字典形式的条件</span></span><br><span class="line">        t = self.collection.find_one(&#123;<span class="string">"name"</span>: <span class="string">"test10005"</span>&#125;)</span><br><span class="line">        print(t)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">try_find_many</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># find返回所有满足条件的结果，如果条件为空，则返回数据库的所有</span></span><br><span class="line">        t = self.collection.find(&#123;<span class="string">"name"</span>: <span class="string">"test10005"</span>&#125;)</span><br><span class="line">        <span class="comment"># 结果是一个Cursor游标对象，是一个可迭代对象，可以类似读文件的指针</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> t:</span><br><span class="line">            print(i)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> t:  <span class="comment"># 此时t中没有内容</span></span><br><span class="line">            print(i)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">try_update_one</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># update_one更新一条数据</span></span><br><span class="line">        self.collection.update_one(&#123;<span class="string">"name"</span>: <span class="string">"test10005"</span>&#125;, &#123;<span class="string">"$set"</span>:&#123;<span class="string">"name"</span>: <span class="string">"new_test10005"</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">try_update_many</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># update_many更新全部数据</span></span><br><span class="line">        self.collection.update_many(&#123;<span class="string">"name"</span>: <span class="string">"test10005"</span>&#125;, &#123;<span class="string">"$set"</span>: &#123;<span class="string">"name"</span>: <span class="string">"new_test10005"</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">try_delete_one</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># delete_one删除一条数据</span></span><br><span class="line">        self.collection.delete_one(&#123;<span class="string">"name"</span>: <span class="string">"test10010"</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">try_delete_many</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># delete_many删除所有满足条件的数据</span></span><br><span class="line">        self.collection.delete_many(&#123;<span class="string">"name"</span>: <span class="string">"test10010"</span>&#125;)</span><br></pre></td></tr></table></figure><ul><li>collection.find({})<ul><li>返回cursor，能够迭代，只能迭代一些</li></ul></li></ul><h4 id="练习-2"><a href="#练习-2" class="headerlink" title="练习"></a>练习</h4><p>1.统计t1中所有的name的出现的次数</p><p>2.统计t1中所有的name的出现的次数中次数大于4的name</p><p>3.统计t1中所有的name的出现的次数中次数大于4的次数（只显示次数）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DouBanMongo</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        client = MongoClient()</span><br><span class="line">        self.collection = client[<span class="string">"test"</span>][<span class="string">"t1"</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(self)</span>:</span></span><br><span class="line">        group = &#123;<span class="string">"$group"</span>: &#123;<span class="string">"_id"</span>: <span class="string">"$name"</span>, <span class="string">"count"</span>: &#123;<span class="string">"$sum"</span>: <span class="number">1</span>&#125;&#125;&#125;</span><br><span class="line">        match = &#123;<span class="string">"$match"</span>: &#123;<span class="string">"count"</span>: &#123;<span class="string">"$gt"</span>: <span class="number">4</span>&#125;&#125;&#125;</span><br><span class="line">        project = &#123;<span class="string">"$project"</span>: &#123;<span class="string">"count"</span>: <span class="number">1</span>, <span class="string">"_id"</span>: <span class="number">0</span>&#125;&#125;</span><br><span class="line">        ret = self.collection.aggregate([group, match, project])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> ret:</span><br><span class="line">            print(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    douBanMongo = DouBanMongo()</span><br><span class="line">    douBanMongo.test()</span><br></pre></td></tr></table></figure><p>1、使用python向集合t5中插入1000条文档，文档的属性包括_id、name</p><ul><li>_id的值为0、1、2、3…999</li><li>name的值为’py0’、’py1’…</li></ul><p>2、查询显示出_id为100的整倍数的文档，如100、200、300…，并将name输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LianXiMongo</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        client = MongoClient()</span><br><span class="line">        self.collection = client[<span class="string">"test"</span>][<span class="string">"t5"</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">(self)</span>:</span></span><br><span class="line">        test_list = [&#123;<span class="string">"_id"</span>: i, <span class="string">"name"</span>: <span class="string">"py&#123;&#125;"</span>.format(i)&#125; <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>)]</span><br><span class="line">        self.collection.insert_many(test_list)</span><br><span class="line">        print(<span class="string">"插入成功"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test2</span><span class="params">(self)</span>:</span></span><br><span class="line">        list = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>) <span class="keyword">if</span> i % <span class="number">100</span> == <span class="number">0</span> <span class="keyword">and</span> i != <span class="number">0</span>]</span><br><span class="line">        ret = self.collection.find(&#123;<span class="string">"_id"</span>: &#123;<span class="string">"$in"</span>: list&#125;&#125;, &#123;<span class="string">"_id"</span>: <span class="number">0</span>, <span class="string">"name"</span>: <span class="number">1</span>&#125;)</span><br><span class="line">        <span class="keyword">for</span> temp <span class="keyword">in</span> ret:</span><br><span class="line">            print(temp)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.test1()</span><br><span class="line">        self.test2()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    lianXiMongo = LianXiMongo()</span><br><span class="line">    lianXiMongo.run()</span><br></pre></td></tr></table></figure><h3 id="mongodb-mysql-redis的区别和使用场景"><a href="#mongodb-mysql-redis的区别和使用场景" class="headerlink" title="mongodb mysql redis的区别和使用场景"></a>mongodb mysql redis的区别和使用场景</h3><ul><li>mysql是关系型数据库，支持事物</li><li>mongodb，redis非关系型数据库，不支持事物</li><li>mysql，mongodb，redis的使用根据如何方便进行选择<ul><li>希望速度快的时候，选择mongodb或者是redis</li><li>数据量过大的时候，选择频繁使用的数据存入redis，其他的存入mongodb</li><li>mongodb不用提前建表建数据库，使用方便，字段数量不确定的时候使用mongodb</li><li>后续需要用到数据之间的关系，此时考虑mysql</li></ul></li></ul><h3 id="爬虫数据去重，实现增量式爬虫"><a href="#爬虫数据去重，实现增量式爬虫" class="headerlink" title="爬虫数据去重，实现增量式爬虫"></a>爬虫数据去重，实现增量式爬虫</h3><ul><li>使用数据库建立关键字段（一个或者多个）建立索引进行去重</li><li>根据url地址进行去重<ul><li>使用场景：<ul><li>url地址对应的数据不会变的情况，url地址能够唯一判别一个条数据的情况</li></ul></li><li>思路<ul><li>url存在redis中</li><li>拿到url地址，判断url在redis的url的集合中是够存在</li><li>存在：说明url已经被请求过，不再请求</li><li>不存在：url地址没有被请求过，请求，把该url存入redis的集合中</li></ul></li><li>布隆过滤器<ul><li>使用多个加密算法加密url地址，得到多个值</li><li>往对应值的位置把结果设置为1</li><li>新来一个url地址，一样通过加密算法生成多个值</li><li>如果对应位置的值全为1，说明这个url地址已经抓过</li><li>否则没有抓过，就把对应位置的值设置为1</li><li>布隆过滤器结果是有概率的，判断结果不存在就一定不存在，判断存在也可能不存在</li></ul></li></ul></li><li>根据数据本身进行去重<ul><li>选择特定的字段，使用加密算法（md5，sha1）讲字段进行加密，生成字符串，存入redis的集合中</li><li>后续新来一条数据，同样的方法进行加密，如果得到的字符串在redis中存在，说明数据存在，对数据进行更新，否则说明数据不存在，直接插入</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;###一、数据库和集合的相关操作 &lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/s
      
    
    </summary>
    
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="mongodb" scheme="http://yoursite.com/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>pycharm快捷键大全</title>
    <link href="http://yoursite.com/2020/05/16/others/pycharm%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%A4%A7%E5%85%A8/"/>
    <id>http://yoursite.com/2020/05/16/others/pycharm%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%A4%A7%E5%85%A8/</id>
    <published>2020-05-16T01:05:57.000Z</published>
    <updated>2020-05-16T01:05:56.253Z</updated>
    
    <content type="html"><![CDATA[<p>#pycharm快捷键大全</p><h3 id="1、编辑（Editing）"><a href="#1、编辑（Editing）" class="headerlink" title="1、编辑（Editing）"></a>1、编辑（Editing）</h3><p>Ctrl + Space 基本的代码完成（类、方法、属性）</p><p>Ctrl + Alt + Space 快速导入任意类</p><p>Ctrl + Shift + Enter 语句完成</p><p>Ctrl + P 参数信息（在方法中调用参数）</p><p>Ctrl + Q 快速查看文档</p><p>F1 Web帮助文档主页</p><p>Shift + F1 选中对象的Web帮助文档</p><p>Ctrl + 悬浮/单击鼠标左键 简介/进入代码定义</p><p>Ctrl + Z 撤销上次操作</p><p>Ctrl + Shift + Z 重做,恢复上次的撤销</p><p>Ctrl + F1 显示错误描述或警告信息</p><p>Alt + Insert 自动生成代码</p><p>Ctrl + O 重新方法</p><p>Ctrl + Alt + T 选中</p><p>Ctrl + / 行注释/取消注释</p><p>Ctrl + Shift + / 块注释</p><p>Ctrl + W 选中增加的代码块</p><p>Ctrl + Shift + W 回到之前状态</p><p>Ctrl + Shift + ]/[ 选定代码块结束、开始</p><p>Alt + Enter 快速修正</p><p>Ctrl + Alt + L 代码格式化</p><p>Ctrl + Alt + O 优化导入</p><p>Ctrl + Alt + I 自动缩进</p><p>Tab / Shift + Tab 缩进、不缩进当前行</p><p>Ctrl+X/Shift+Delete 剪切当前行或选定的代码块到剪贴板</p><p>Ctrl+C/Ctrl+Insert 复制当前行或选定的代码块到剪贴板</p><p>Ctrl+V/Shift+Insert 从剪贴板粘贴</p><p>Ctrl + Shift + V 从最近的缓冲区粘贴</p><p>Ctrl + D 复制选定的区域或行</p><p>Ctrl + Y 删除选定的行</p><p>Ctrl + Shift + J 添加智能线</p><p>Ctrl + Enter 智能线切割</p><p>Shift + Enter 另起一行</p><p>Ctrl + Shift + U 在选定的区域或代码块间切换</p><p>Ctrl + Delete 删除到字符结束</p><p>Ctrl + Backspace 删除到字符开始</p><p>Ctrl + Numpad+/- 展开/折叠代码块（当前位置：函数、注释等）</p><p>Ctrl + Shift + Numpad+/- 展开/折叠所有代码块</p><p>Ctrl + F4 关闭运行的选项卡</p><h3 id="2、查找-替换-Search-Replace"><a href="#2、查找-替换-Search-Replace" class="headerlink" title="2、查找/替换(Search/Replace)"></a>2、查找/替换(Search/Replace)</h3><p>F3 下一个</p><p>Shift + F3 前一个</p><p>Ctrl + R 替换</p><p>Ctrl + Shift + R 全局替换</p><p>Ctrl + Shift + F 全局查找（可以在整个项目中查找某个字符串什么的，如查找某个函数名）</p><p>连续敲击两次Shift键 查找函数</p><h3 id="3、运行-Running"><a href="#3、运行-Running" class="headerlink" title="3、运行(Running)"></a>3、运行(Running)</h3><p>Alt + Shift + F10 运行模式配置</p><p>Alt + Shift + F9 调试模式配置</p><p>Shift + F10 运行</p><p>Shift + F9 调试</p><p>Ctrl + Shift + F10 运行编辑器配置</p><p>Ctrl + Alt + R 运行manage.py任务</p><h3 id="4、调试-Debugging"><a href="#4、调试-Debugging" class="headerlink" title="4、调试(Debugging)"></a>4、调试(Debugging)</h3><p>F8 跳过</p><p>F7 进入</p><p>Shift + F8 退出</p><p>Alt + F9 运行游标</p><p>Alt + F8 验证表达式</p><p>Ctrl + Alt + F8 快速验证表达式</p><p>F9 恢复程序</p><p>Ctrl + F8 断点开关</p><p>Ctrl + Shift + F8 查看断点</p><h3 id="5、导航-Navigation"><a href="#5、导航-Navigation" class="headerlink" title="5、导航(Navigation)"></a>5、导航(Navigation)</h3><p>Ctrl + N 跳转到类</p><p>Ctrl + Shift + N 跳转到符号</p><p>Alt + Right/Left 跳转到下一个、前一个编辑的选项卡（代码文件）</p><p>Alt + Up/Down跳转到上一个、下一个方法</p><p>F12 回到先前的工具窗口</p><p>Esc 从工具窗口回到编辑窗口</p><p>Shift + Esc 隐藏运行的、最近运行的窗口</p><p>Ctrl + Shift + F4 关闭主动运行的选项卡</p><p>Ctrl + G 查看当前行号、字符号</p><p>Ctrl + E 在当前文件弹出最近使用的文件列表</p><p>Ctrl+Alt+Left/Right 后退、前进</p><p>Ctrl+Shift+Backspace 导航到最近编辑区域（差不多就是返回上次编辑的位置）</p><p>Alt + F1 查找当前文件或标识</p><p>Ctrl+B / Ctrl+Click 跳转到声明</p><p>Ctrl + Alt + B 跳转到实现</p><p>Ctrl + Shift + I 查看快速定义</p><p>Ctrl + Shift + B 跳转到类型声明</p><p>Ctrl + U 跳转到父方法、父类</p><p>Alt + Up/Down 跳转到上一个、下一个方法</p><p>Ctrl + ]/[ 跳转到代码块结束、开始</p><p>Ctrl + F12 弹出文件结构</p><p>Ctrl + H 类型层次结构</p><p>Ctrl + Shift + H 方法层次结构</p><p>Ctrl + Alt + H 调用层次结构</p><p>F2 / Shift + F2 下一条、前一条高亮的错误</p><p>F4 / Ctrl + Enter 编辑资源、查看资源</p><p>Alt + Home显示导航条F11 书签开关</p><p>Ctrl + Shift + F11 书签助记开关</p><p>Ctrl + #[0-9] 跳转到标识的书签</p><p>Shift + F11 显示书签</p><h3 id="6、搜索相关-Usage-Search"><a href="#6、搜索相关-Usage-Search" class="headerlink" title="6、搜索相关(Usage Search)"></a>6、搜索相关(Usage Search)</h3><p>Alt + F7/Ctrl + F7 文件中查询用法</p><p>Ctrl + Shift + F7 文件中用法高亮显示</p><p>Ctrl + Alt + F7 显示用法</p><h3 id="7、重构-Refactoring"><a href="#7、重构-Refactoring" class="headerlink" title="7、重构(Refactoring)"></a>7、重构(Refactoring)</h3><p>Alt + Delete 安全删除</p><p>Shift + F6 重命名文件</p><p>Ctrl + F6 更改签名</p><p>Ctrl + Alt + N 内联</p><p>Ctrl + Alt + M 提取方法</p><p>Ctrl + Alt + V 提取属性</p><p>Ctrl + Alt + F 提取字段</p><p>Ctrl + Alt + C 提取常量</p><p>Ctrl + Alt + P 提取参数</p><h3 id="8、控制VCS-Local-History"><a href="#8、控制VCS-Local-History" class="headerlink" title="8、控制VCS/Local History"></a>8、控制VCS/Local History</h3><p>Ctrl + K 提交项目</p><p>Ctrl + T 更新项目</p><p>Alt + Shift + C 查看最近的变化</p><p>Alt + BackQuote(‘) VCS快速弹出</p><h3 id="9、模版-Live-Templates"><a href="#9、模版-Live-Templates" class="headerlink" title="9、模版(Live Templates)"></a>9、模版(Live Templates)</h3><p>Ctrl + Alt + J 当前行使用模版</p><p>Ctrl + J 插入模版</p><h3 id="10、基本-General"><a href="#10、基本-General" class="headerlink" title="10、基本(General)"></a>10、基本(General)</h3><p>Alt + #[0-9] 打开相应的工具窗口</p><p>Ctrl + Alt + Y 同步</p><p>Ctrl + Shift + F12 最大化编辑开关</p><p>Alt + Shift + F 添加到最喜欢</p><p>Alt + Shift + I 根据配置检查当前文件</p><p>Ctrl + BackQuote(‘) 快速切换当前计划</p><p>Ctrl + Alt + S 打开设置页</p><p>Ctrl + Shift + A 查找编辑器里所有的动作</p><p>Ctrl + Tab 在窗口间进行切换</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#pycharm快捷键大全&lt;/p&gt;
&lt;h3 id=&quot;1、编辑（Editing）&quot;&gt;&lt;a href=&quot;#1、编辑（Editing）&quot; class=&quot;headerlink&quot; title=&quot;1、编辑（Editing）&quot;&gt;&lt;/a&gt;1、编辑（Editing）&lt;/h3&gt;&lt;p&gt;Ctrl 
      
    
    </summary>
    
    
      <category term="其他" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="pycharm" scheme="http://yoursite.com/tags/pycharm/"/>
    
      <category term="快捷键" scheme="http://yoursite.com/tags/%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    
  </entry>
  
  <entry>
    <title>python高级编程和异步IO并发编程</title>
    <link href="http://yoursite.com/2020/05/16/python/Python%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E5%92%8C%E5%BC%82%E6%AD%A5IO%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    <id>http://yoursite.com/2020/05/16/python/Python%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E5%92%8C%E5%BC%82%E6%AD%A5IO%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</id>
    <published>2020-05-16T01:05:57.000Z</published>
    <updated>2020-05-16T02:19:19.430Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第二章-一切皆对象"><a href="#第二章-一切皆对象" class="headerlink" title="第二章 一切皆对象"></a>第二章 一切皆对象</h1><h4 id="函数和类也是对象，属于python的一等公民"><a href="#函数和类也是对象，属于python的一等公民" class="headerlink" title="函数和类也是对象，属于python的一等公民"></a>函数和类也是对象，属于python的一等公民</h4><ul><li>函数和类可以赋值给一个变量</li><li>函数和类可以添加到集合对象中</li><li>函数和类可以作为参数传递给函数</li><li>可以当做函数的返回值</li></ul><h4 id="type、class、object之间的关系"><a href="#type、class、object之间的关系" class="headerlink" title="type、class、object之间的关系"></a>type、class、object之间的关系</h4><p>type→class→obj</p><p>例如：type→int→1</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">stu = Student()</span><br><span class="line">print(type(stu))</span><br><span class="line">print(type(Student))</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">__main__</span>.<span class="title">Student</span>'&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">type</span>'&gt;</span></span><br></pre></td></tr></table></figure><p>object是最顶层的基类</p><p><img src="/2020/05/16/python/Python%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E5%92%8C%E5%BC%82%E6%AD%A5IO%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/WX20190518-094838@2x.png" alt></p><h1 id="第三章-魔法函数"><a href="#第三章-魔法函数" class="headerlink" title="第三章 魔法函数"></a>第三章 魔法函数</h1><h4 id="getitem"><a href="#getitem" class="headerlink" title="__getitem__"></a><code>__getitem__</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Company</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, employee_list)</span>:</span></span><br><span class="line">        self.employee = employee_list</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.employee[item]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">company = Company([<span class="string">"tom"</span>, <span class="string">"bob"</span>, <span class="string">"jane"</span>])</span><br><span class="line"></span><br><span class="line">company1 = company[:<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">print(len(company))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> em <span class="keyword">in</span> company1:</span><br><span class="line">    print(em)</span><br></pre></td></tr></table></figure><h4 id="repr"><a href="#repr" class="headerlink" title="__repr__"></a><code>__repr__</code></h4><p>如果在一个类中定义了<code>__repr__</code>方法，那么在开发模式下，输出对象显示该方法的返回值</p><h4 id="str"><a href="#str" class="headerlink" title="__str__"></a><code>__str__</code></h4><p>如果一个类中定义了<code>__str__</code>方法，那么在打印 对象 时，默认输出该方法的返回值。</p><h4 id="abs"><a href="#abs" class="headerlink" title="__abs__"></a><code>__abs__</code></h4><p>绝对值</p><p><img src="/2020/05/16/python/Python%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E5%92%8C%E5%BC%82%E6%AD%A5IO%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/WX20190518-104614@2x.png" alt></p><h4 id="add"><a href="#add" class="headerlink" title="__add__"></a><code>__add__</code></h4><p>+</p><p><img src="/2020/05/16/python/Python%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E5%92%8C%E5%BC%82%E6%AD%A5IO%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/WX20190518-104539@2x.png" alt></p><h4 id="len"><a href="#len" class="headerlink" title="__len__"></a><code>__len__</code></h4><p>显示长度，效率很高</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Company</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, employee_list)</span>:</span></span><br><span class="line">        self.employee = employee_list</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> len(self.employee)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">company = Company([<span class="string">"tom"</span>, <span class="string">"bob"</span>, <span class="string">"jane"</span>])</span><br><span class="line"></span><br><span class="line">print(len(company))</span><br></pre></td></tr></table></figure><h4 id="mro"><a href="#mro" class="headerlink" title="__mro__"></a><code>__mro__</code></h4><p>打印类的属性和方法的查找顺序</p><h4 id="dict"><a href="#dict" class="headerlink" title="__dict__"></a><code>__dict__</code></h4><p>显示类或对象的所以属性和方法，也可以通过它添加属性和方法</p><h4 id="enter-、-exit"><a href="#enter-、-exit" class="headerlink" title="__enter__、__exit__"></a><code>__enter__</code>、<code>__exit__</code></h4><p>实现上下文管理器，见第四章的上下文管理器</p><h4 id="getattr-、-getattribute"><a href="#getattr-、-getattribute" class="headerlink" title="__getattr__、__getattribute__"></a><code>__getattr__</code>、<code>__getattribute__</code></h4><p><code>__getattr__</code>：当查找的属性不存在时，会进入<code>__getattr__</code></p><p><code>__getattribute__</code>:只要调用属性，就会先进入<code>__getattribute__</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, info=&#123;&#125;)</span>:</span></span><br><span class="line">        self.info = info</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 方法里的参数item就是对应的属性</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.info[item]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># def __getattribute__(self, item):</span></span><br><span class="line">    <span class="comment">#     return "bobby"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    user = User(info=&#123;<span class="string">"company_name"</span>: <span class="string">"imooc"</span>, <span class="string">"name"</span>: <span class="string">"bobby"</span>&#125;)</span><br><span class="line">    print(user.test)</span><br></pre></td></tr></table></figure><h1 id="第四章-深入类和对象"><a href="#第四章-深入类和对象" class="headerlink" title="第四章 深入类和对象"></a>第四章 深入类和对象</h1><h4 id="鸭子类型和多态"><a href="#鸭子类型和多态" class="headerlink" title="鸭子类型和多态"></a>鸭子类型和多态</h4><p>所有类实现了一个共同的方法，这种方法叫做鸭，这些类就可以归为一种类型，都是鸭子类型，他们都可以调用这个鸭方法。所以也可以理解为，某一个类只要实现了某种魔法方法，那么这个类就是这个方法对应的某种类型。例如：某个类实现了<code>__iter__</code>方法，那么这个类就是可迭代类型。</p><p>而每个类的这个鸭方法可能又不一样，就叫做多态。</p><p>举例：list、tuple、set都是可迭代类型，他们都有魔法方法<code>__iter__</code>使他们成为可迭代对象，可是它们具体的<code>__iter__</code>方法可能又不一样。</p><p>在python中传参数时经常是传一种类型就可以了，而不是一定要传某种对象，例如list的extend方法，传入可迭代类型就可以，而不是一定要传入list对象。</p><h4 id="抽象基类-abc模块"><a href="#抽象基类-abc模块" class="headerlink" title="抽象基类(abc模块)"></a>抽象基类(abc模块)</h4><p>主要的两个作用：</p><p>1、可以使用isinstance判断某个对象的类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections.abc <span class="keyword">import</span> Sized</span><br><span class="line">isinstance(com, Sized)</span><br></pre></td></tr></table></figure><p>2、强制指定某个子类必须要实现某个方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> abc</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CacheBase</span><span class="params">(metaclass=abc.ABCMeta)</span>:</span></span><br><span class="line"><span class="meta">    @abc.abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abc.abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set</span><span class="params">(self, key, value)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>使用上述抽象基类的方法后，如果子类没有实现这些方法，在实例化时就会抛出异常</p><p>一般不推荐使用抽象基类，因为如果使用抽象基类，容易代码设计过度，导致一些不必要的麻烦，如果要通过继承实现某些方法，推荐用mixin，或实现某些魔法方法。</p><p>模拟一个抽象基类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CacheBase</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set</span><span class="params">(self, key, value)</span>:</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError</span><br></pre></td></tr></table></figure><p>上述是模拟抽象基类的方法，可以在子类继承后，如果没有重写这些方法，那么在使用这些方法时就会抛出异常。</p><h4 id="isinstance和type"><a href="#isinstance和type" class="headerlink" title="isinstance和type"></a>isinstance和type</h4><p>判断一个变量的类型时尽量用isinstance，因为isinstance在判断时会把继承关系也判断进去，而如果用type则会出现误差。</p><h4 id="数据封装和私有属性"><a href="#数据封装和私有属性" class="headerlink" title="数据封装和私有属性"></a>数据封装和私有属性</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> chapter04.class_method <span class="keyword">import</span> Date</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, birthday)</span>:</span></span><br><span class="line">        self.__birthday = birthday</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_age</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 返回年龄</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">2018</span> - self.__birthday.year</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    user = User(Date(<span class="number">1990</span>, <span class="number">2</span>, <span class="number">1</span>))</span><br><span class="line">    print(user._User__birthday)</span><br><span class="line">    print(user.get_age())</span><br></pre></td></tr></table></figure><h4 id="python对象的自省机制"><a href="#python对象的自省机制" class="headerlink" title="python对象的自省机制"></a>python对象的自省机制</h4><p>自省是通过一定的机制查询到对象的内部结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="string">"""人"""</span></span><br><span class="line">    name = <span class="string">"user"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(Person)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, scool_name)</span>:</span></span><br><span class="line">        self.scool_name = scool_name</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    user = Student(<span class="string">"慕课网"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 通过__dict__查询属性</span></span><br><span class="line">    print(user.__dict__)</span><br><span class="line">    <span class="comment"># 也可以通过__dict__添加属性</span></span><br><span class="line">    user.__dict__[<span class="string">"school_addr"</span>] = <span class="string">"北京市"</span></span><br><span class="line">    print(user.school_addr)</span><br><span class="line">    print(Person.__dict__)</span><br><span class="line">    print(user.name)</span><br><span class="line">    a = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">    <span class="comment"># dir函数比__dict__更加强大，列表使用__dict__会报错，dir函数则不会</span></span><br><span class="line">    print(dir(a))</span><br></pre></td></tr></table></figure><h4 id="super函数"><a href="#super函数" class="headerlink" title="super函数"></a>super函数</h4><p>super函数的执行顺序是根据<code>__mro__</code>的继承顺序，如果根据<code>__mro__</code>的顺序，其中的一个类C没有super()方法，那么C后面的继承就会中断，只继承C和C前面的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"A"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"B"</span>)</span><br><span class="line">        super().__init__()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"C"</span>)</span><br><span class="line">        <span class="comment"># super().__init__()</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span><span class="params">(B, C)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"D"</span>)</span><br><span class="line">        super(D, self).__init__()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    print(D.__mro__)</span><br><span class="line">    d = D()</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(&lt;class '__main__.D'&gt;, &lt;class '__main__.B'&gt;, &lt;class '__main__.C'&gt;, &lt;class '__main__.A'&gt;, &lt;class 'object'&gt;)</span><br><span class="line">D</span><br><span class="line">B</span><br><span class="line">C</span><br></pre></td></tr></table></figure><h4 id="mixin混合模式"><a href="#mixin混合模式" class="headerlink" title="mixin混合模式"></a>mixin混合模式</h4><p>mixin模式特点</p><ol><li>Mixin类功能单一 </li><li>不和基类关联，可以和任意基类组合， 基类可以不和mixin关联就能初始化成功 </li><li>在mixin中不要使用super这种用法</li></ol><h4 id="异常处理和上下文管理器"><a href="#异常处理和上下文管理器" class="headerlink" title="异常处理和上下文管理器"></a>异常处理和上下文管理器</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exe_try</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(<span class="string">"code started"</span>)</span><br><span class="line">        <span class="keyword">raise</span> KeyError</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">except</span> KeyError <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">"key error"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"other error"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        print(<span class="string">"finally"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">4</span></span><br><span class="line"><span class="comment"># 以上代码执行结果是：</span></span><br><span class="line">code started</span><br><span class="line">key error</span><br><span class="line"><span class="keyword">finally</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="comment"># 如果注释了finally中的return 4，那么执行结果就会变成</span></span><br><span class="line">code started</span><br><span class="line">key error</span><br><span class="line"><span class="keyword">finally</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 上下文管理器协议</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sample</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"enter"</span>)</span><br><span class="line">        <span class="comment"># 获取资源</span></span><br><span class="line">        <span class="keyword">return</span> self  <span class="comment"># 此处一定要return self</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, exc_type, exc_val, exc_tb)</span>:</span></span><br><span class="line">        <span class="comment"># 释放资源</span></span><br><span class="line">        print(<span class="string">"exit"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_something</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"doing something"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> Sample() <span class="keyword">as</span> sample:</span><br><span class="line">    sample.do_something()</span><br></pre></td></tr></table></figure><h4 id="简化上下文管理器"><a href="#简化上下文管理器" class="headerlink" title="简化上下文管理器"></a>简化上下文管理器</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> contextlib</span><br><span class="line"></span><br><span class="line"><span class="meta">@contextlib.contextmanager</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">file_open</span><span class="params">(file_name)</span>:</span></span><br><span class="line">    print(<span class="string">"file open"</span>)</span><br><span class="line">    <span class="comment"># yield前的代码先执行，相当于上面的__enter__内的内容</span></span><br><span class="line">    <span class="keyword">yield</span> &#123;&#125;</span><br><span class="line">    <span class="comment"># yield后的代码最后执行，相当于上面的__exit__内的内容</span></span><br><span class="line">    print(<span class="string">"file end"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> file_open(<span class="string">"bobby.txt"</span>) <span class="keyword">as</span> f_opened:</span><br><span class="line">  <span class="comment"># with内执行的代码(也就是下面的代码)，相当于上面的do_something内的内容</span></span><br><span class="line">    print(<span class="string">"file processing"</span>)</span><br></pre></td></tr></table></figure><h1 id="第五章-自定义序列类"><a href="#第五章-自定义序列类" class="headerlink" title="第五章 自定义序列类"></a>第五章 自定义序列类</h1><h4 id="序列类型区分"><a href="#序列类型区分" class="headerlink" title="序列类型区分"></a>序列类型区分</h4><p>区分维度1：</p><p>容器序列（list、tuple、deque）：存放的数据可以是任意类型的。</p><p>扁平序列(str、bytes、bytearray、array.array)：只能存放一种类型的数据。</p><p>区分维度2：</p><p>可变序列：list， deque，bytearray、array。</p><p>不可变序列：str、tuple、bytes。</p><h4 id="、-、extend、append"><a href="#、-、extend、append" class="headerlink" title="+、+=、extend、append"></a>+、+=、extend、append</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> abc</span><br><span class="line"><span class="comment"># +号两侧必须是同种类型，相加后返回一个新的序列</span></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">c = a + [<span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 就地加，不会产生新的序列，和extend相同，所相加的为可迭代类型即可</span></span><br><span class="line">a += (<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">a.extend(range(<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">a.append((<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><h4 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h4><p>会产生一个新的序列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模式[start:end:step]</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    其中，第一个数字start表示切片开始位置，默认为0；</span></span><br><span class="line"><span class="string">    第二个数字end表示切片截止（但不包含）位置（默认为列表长度）；</span></span><br><span class="line"><span class="string">    第三个数字step表示切片的步长（默认为1）。</span></span><br><span class="line"><span class="string">    当start为0时可以省略，当end为列表长度时可以省略，</span></span><br><span class="line"><span class="string">    当step为1时可以省略，并且省略步长时可以同时省略最后一个冒号。</span></span><br><span class="line"><span class="string">    另外，当step为负整数时，表示反向切片，这时start应该比end的值要大才行。</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">aList = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">17</span>]</span><br><span class="line">print(aList[::])  <span class="comment"># 返回包含原列表中所有元素的新列表</span></span><br><span class="line">print(aList[::<span class="number">-1</span>])  <span class="comment"># 返回包含原列表中所有元素的逆序列表</span></span><br><span class="line">print(aList[::<span class="number">2</span>])  <span class="comment"># 隔一个取一个，获取偶数位置的元素</span></span><br><span class="line">print(aList[<span class="number">1</span>::<span class="number">2</span>])  <span class="comment"># 隔一个取一个，获取奇数位置的元素</span></span><br><span class="line">print(aList[<span class="number">3</span>:<span class="number">6</span>])  <span class="comment"># 指定切片的开始和结束位置</span></span><br><span class="line">aList[<span class="number">0</span>:<span class="number">100</span>]  <span class="comment"># 切片结束位置大于列表长度时，从列表尾部截断</span></span><br><span class="line">aList[<span class="number">100</span>:]  <span class="comment"># 切片开始位置大于列表长度时，返回空列表</span></span><br><span class="line"></span><br><span class="line">aList[len(aList):] = [<span class="number">9</span>]  <span class="comment"># 在列表尾部增加元素</span></span><br><span class="line">aList[:<span class="number">0</span>] = [<span class="number">1</span>, <span class="number">2</span>]  <span class="comment"># 在列表头部插入元素</span></span><br><span class="line">aList[<span class="number">3</span>:<span class="number">3</span>] = [<span class="number">4</span>]  <span class="comment"># 在列表中间位置插入元素</span></span><br><span class="line">aList[:<span class="number">3</span>] = [<span class="number">1</span>, <span class="number">2</span>]  <span class="comment"># 替换列表元素，等号两边的列表长度相等</span></span><br><span class="line">aList[<span class="number">3</span>:] = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]  <span class="comment"># 等号两边的列表长度也可以不相等</span></span><br><span class="line">aList[::<span class="number">2</span>] = [<span class="number">0</span>] * <span class="number">3</span>  <span class="comment"># 隔一个修改一个</span></span><br><span class="line">print(aList)</span><br><span class="line">aList[::<span class="number">2</span>] = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]  <span class="comment"># 隔一个修改一个</span></span><br><span class="line">aList[::<span class="number">2</span>] = [<span class="number">1</span>, <span class="number">2</span>]  <span class="comment"># 此条会抛异常，左侧切片不连续，等号两边列表长度必须相等</span></span><br><span class="line">aList[:<span class="number">3</span>] = []  <span class="comment"># 删除列表中前3个元素</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> aList[:<span class="number">3</span>]  <span class="comment"># 切片元素连续</span></span><br><span class="line"><span class="keyword">del</span> aList[::<span class="number">2</span>]  <span class="comment"># 切片元素不连续，隔一个删一个</span></span><br></pre></td></tr></table></figure><p>实现一个可切片的序列类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numbers</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Group</span>:</span></span><br><span class="line">    <span class="comment"># 支持切片操作</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, group_name, company_name, staffs)</span>:</span></span><br><span class="line">        self.group_name = group_name</span><br><span class="line">        self.company_name = company_name</span><br><span class="line">        self.staffs = staffs</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reversed__</span><span class="params">(self)</span>:</span>  <span class="comment"># 实现反转</span></span><br><span class="line">        self.staffs.reverse()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, item)</span>:</span>  <span class="comment"># 实现可切片</span></span><br><span class="line">        cls = type(self)</span><br><span class="line">        <span class="keyword">if</span> isinstance(item, slice):  <span class="comment"># 如果传入的是切片</span></span><br><span class="line">            <span class="keyword">return</span> cls(group_name=self.group_name, company_name=self.company_name, staffs=self.staffs[item])</span><br><span class="line">        <span class="keyword">elif</span> isinstance(item, numbers.Integral):  <span class="comment"># 如果传入的是索引</span></span><br><span class="line">            <span class="keyword">return</span> cls(group_name=self.group_name, company_name=self.company_name, staffs=[self.staffs[item]])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span>  <span class="comment"># 实现长度</span></span><br><span class="line">        <span class="keyword">return</span> len(self.staffs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span>  <span class="comment"># 实现可遍历</span></span><br><span class="line">        <span class="keyword">return</span> iter(self.staffs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__contains__</span><span class="params">(self, item)</span>:</span>  <span class="comment"># 实现if···in···：</span></span><br><span class="line">        <span class="keyword">if</span> item <span class="keyword">in</span> self.staffs:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">staffs = [<span class="string">"bobby1"</span>, <span class="string">"imooc"</span>, <span class="string">"bobby2"</span>, <span class="string">"bobby3"</span>]</span><br><span class="line">group = Group(company_name=<span class="string">"imooc"</span>, group_name=<span class="string">"user"</span>, staffs=staffs)</span><br><span class="line">reversed(group)</span><br><span class="line"><span class="keyword">for</span> user <span class="keyword">in</span> group:</span><br><span class="line">    print(user)</span><br><span class="line">group[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">group[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><h4 id="bisect管理可排序序列"><a href="#bisect管理可排序序列" class="headerlink" title="bisect管理可排序序列"></a>bisect管理可排序序列</h4><p>用来处理已排序的序列，用来维持已排序的序列，升序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> bisect</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用来处理已排序的序列，用来维持已排序的序列， 升序</span></span><br><span class="line"><span class="comment"># 二分查找</span></span><br><span class="line">inter_list = list()</span><br><span class="line">bisect.insort(inter_list, <span class="number">3</span>)</span><br><span class="line">bisect.insort(inter_list, <span class="number">2</span>)</span><br><span class="line">bisect.insort(inter_list, <span class="number">5</span>)</span><br><span class="line">bisect.insort(inter_list, <span class="number">1</span>)</span><br><span class="line">bisect.insort(inter_list, <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">print(bisect.bisect_left(inter_list, <span class="number">3</span>))</span><br><span class="line">print(bisect.bisect_left(inter_list, <span class="number">3</span>))</span><br><span class="line"><span class="comment"># 学习成绩</span></span><br><span class="line">print(inter_list)</span><br></pre></td></tr></table></figure><h4 id="什么时候我们不该使用列表"><a href="#什么时候我们不该使用列表" class="headerlink" title="什么时候我们不该使用列表"></a>什么时候我们不该使用列表</h4><p>array(数组)：数组只能存放指定的数据类型，但是效率要比列表高很多，所以如果存放的都是一种数据，建议使用array</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># array, deque</span></span><br><span class="line"><span class="comment"># 数组</span></span><br><span class="line"><span class="keyword">import</span> array</span><br><span class="line"><span class="comment">#array和list的一个重要区别， array只能存放指定的数据类型</span></span><br><span class="line">my_array = array.array(<span class="string">"i"</span>)</span><br><span class="line">my_array.append(<span class="number">1</span>)</span><br><span class="line">my_array.append(<span class="string">"abc"</span>)</span><br></pre></td></tr></table></figure><p><img src="/2020/05/16/python/Python%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E5%92%8C%E5%BC%82%E6%AD%A5IO%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/WX20190519-100736@2x.png" alt></p><p><a href="https://docs.python.org/3.6/library/array.html" target="_blank" rel="noopener">https://docs.python.org/3.6/library/array.html</a></p><h4 id="列表推导式、生成器表达式、字典推导式、集合推导式"><a href="#列表推导式、生成器表达式、字典推导式、集合推导式" class="headerlink" title="列表推导式、生成器表达式、字典推导式、集合推导式"></a>列表推导式、生成器表达式、字典推导式、集合推导式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列表推导式的效率比较高</span></span><br><span class="line">old_list = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">21</span>) <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用列表推导式把列表嵌套列表变成一个列表</span></span><br><span class="line">a_list = [[<span class="number">1</span>,<span class="number">2</span>], [<span class="number">3</span>,<span class="number">4</span>], [<span class="number">5</span>,<span class="number">6</span>], [<span class="number">7</span>,<span class="number">8</span>]]</span><br><span class="line">b_list = [i <span class="keyword">for</span> j <span class="keyword">in</span> a_list <span class="keyword">for</span> i <span class="keyword">in</span> j]</span><br><span class="line">print(b_list)</span><br><span class="line">&gt;&gt;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hadle_item</span><span class="params">(item)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> item * item</span><br><span class="line">old_list = [hadle_item(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">21</span>) <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成器表达式</span></span><br><span class="line">old_gen = (i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">21</span>) <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典推导式</span></span><br><span class="line">my_dict = &#123;<span class="string">"bobby1"</span>:<span class="number">22</span>, <span class="string">"bobby2"</span>: <span class="number">23</span>, <span class="string">"bobby3"</span>: <span class="number">25</span>&#125;</span><br><span class="line"><span class="comment"># 使用字典推导式把上面的字典key和value进行反转</span></span><br><span class="line">new_dict = &#123;value:key <span class="keyword">for</span> key,value <span class="keyword">in</span> my_dict.item()&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 集合推导式</span></span><br><span class="line"><span class="comment"># my_set = set(my_dict.keys()) 此方法也可实现，但是没有集合推导式灵活</span></span><br><span class="line">my_set = &#123;key <span class="keyword">for</span> key,value <span class="keyword">in</span> my_dict.item()&#125;</span><br></pre></td></tr></table></figure><h1 id="第六章-深入python的set和dict"><a href="#第六章-深入python的set和dict" class="headerlink" title="第六章 深入python的set和dict"></a>第六章 深入python的set和dict</h1><h4 id="dict的常用方法"><a href="#dict的常用方法" class="headerlink" title="dict的常用方法"></a>dict的常用方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="string">"bobby1"</span>: &#123;<span class="string">"company"</span>: <span class="string">"imooc"</span>&#125;,</span><br><span class="line">     <span class="string">"bobby2"</span>: &#123;<span class="string">"company"</span>: <span class="string">"imooc2"</span>&#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># clear清空字典里的全部数据</span></span><br><span class="line">a.clear()</span><br><span class="line"></span><br><span class="line"><span class="comment"># copy, 返回浅拷贝</span></span><br><span class="line">new_dict = a.copy()</span><br><span class="line">new_dict[<span class="string">"bobby1"</span>][<span class="string">"company"</span>] = <span class="string">"imooc3"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># formkeys，向字典中添加数据，key是new_list中的各个元素，value是添加的默认值</span></span><br><span class="line">new_list = [<span class="string">"bobby1"</span>, <span class="string">"bobby2"</span>]</span><br><span class="line">new_dict = dict.fromkeys(new_list, &#123;<span class="string">"company"</span>: <span class="string">"imooc"</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># setdefault,把key和value添加到字典中，并且返回的是value</span></span><br><span class="line">get_value = a.setdefault(<span class="string">"tom"</span>, <span class="string">"alibaba"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># update，更新字典，可以以3中方式添加数据</span></span><br><span class="line">new_dict.update(&#123;<span class="string">"tom1"</span>: <span class="string">"1"</span>&#125;)</span><br><span class="line">new_dict.update(tom2=<span class="string">"2"</span>, tom3=<span class="string">"3"</span>)</span><br><span class="line">new_dict.update([(<span class="string">"tom4"</span>, <span class="string">"4"</span>),])</span><br><span class="line">new_dict.update(((<span class="string">"bobby"</span>, <span class="string">"imooc"</span>),))</span><br></pre></td></tr></table></figure><h4 id="dict的子类"><a href="#dict的子类" class="headerlink" title="dict的子类"></a>dict的子类</h4><p>UserDict: 使用dict的子类，可以继承UserDict，不要继承于dict</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> UserDict</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mydict</span><span class="params">(UserDict)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setitem__</span><span class="params">(self, key, value)</span>:</span></span><br><span class="line">        super().__setitem__(key, value * <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">my_dict = Mydict(one=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># my_dict["one"] = 1</span></span><br><span class="line">print(my_dict)</span><br></pre></td></tr></table></figure><p>defaultdict：子类继承于defaultdict后，如果取值没有，那么就会执行对应的<code>__miss__</code>方法，默认的defaultdict如果取值没有，则会添加空字典进字典，并且返回空字典</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line">my_dict = defaultdict(dict)</span><br><span class="line">my_value = my_dict[<span class="string">"bobby"</span>]</span><br><span class="line">print(my_value)</span><br><span class="line">print(my_dict)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&#123;&#125;</span><br><span class="line">defaultdict(&lt;class 'dict'&gt;, &#123;'bobby': &#123;&#125;&#125;)</span><br></pre></td></tr></table></figure><h4 id="set、fronzenset"><a href="#set、fronzenset" class="headerlink" title="set、fronzenset"></a>set、fronzenset</h4><p>set集合 fronzenset (不可变集合) 无序， 不重复</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">s = set(<span class="string">'abcdee'</span>)</span><br><span class="line">s = &#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>&#125;</span><br><span class="line"><span class="comment"># s = frozenset("abcde") #frozenset可以作为dict的key，因为frozenst是不可变的</span></span><br><span class="line"><span class="comment"># print(s)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># set性能很高</span></span><br><span class="line"><span class="comment"># | &amp; -  #集合运算</span></span><br><span class="line"><span class="comment"># 向set添加数据</span></span><br><span class="line">another_set = set(<span class="string">"cef"</span>)</span><br><span class="line">re_set = s.difference(another_set)</span><br><span class="line">re_set = s - another_set</span><br><span class="line">re_set = s &amp; another_set</span><br><span class="line">re_set = s | another_set</span><br><span class="line">print(re_set)</span><br><span class="line"></span><br><span class="line">print(s.issubset(re_set))  <span class="comment"># 判断re_set是否是s的子集</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">"c"</span> <span class="keyword">in</span> re_set:</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"i am in set"</span>)</span><br></pre></td></tr></table></figure><h4 id="dict和set的实现原理"><a href="#dict和set的实现原理" class="headerlink" title="dict和set的实现原理"></a>dict和set的实现原理</h4><ul><li><p>dict查找的性能远远大于list    </p></li><li><p>在list中随着list数据的增大 查找时间会增大    </p></li><li><p>在dict中查找元素不会随着dict的增大而增大    </p></li></ul><ol><li>dict的key或者set的值 都必须是可以hash的，不可变对象 都是可hash的， str， fronzenset， tuple，自己实现的类<code>__hash__</code></li><li>dict的内存花销大，但是查询速度快， 自定义的对象 或者python内部的对象都是用dict包装的</li><li>dict的存储顺序和元素添加顺序有关</li><li>添加数据有可能改变已有数据的顺序</li></ol><p><img src="/2020/05/16/python/Python%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E5%92%8C%E5%BC%82%E6%AD%A5IO%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/WX20190519-164439@2x.png" alt></p><p><img src="/2020/05/16/python/Python%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E5%92%8C%E5%BC%82%E6%AD%A5IO%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/WX20190519-164704@2x.png" alt></p><h1 id="第七章-对象引用、可变性和垃圾回收"><a href="#第七章-对象引用、可变性和垃圾回收" class="headerlink" title="第七章 对象引用、可变性和垃圾回收"></a>第七章 对象引用、可变性和垃圾回收</h1><h4 id="一个经典的错误"><a href="#一个经典的错误" class="headerlink" title="一个经典的错误"></a>一个经典的错误</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    a += b</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Company</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, staffs=[])</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.staffs = staffs</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, staff_name)</span>:</span></span><br><span class="line">        self.staffs.append(staff_name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(self, staff_name)</span>:</span></span><br><span class="line">        self.staffs.remove(staff_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    com1 = Company(<span class="string">"com1"</span>, [<span class="string">"bobby1"</span>, <span class="string">"bobby2"</span>])</span><br><span class="line">    com1.add(<span class="string">"bobby3"</span>)</span><br><span class="line">    com1.remove(<span class="string">"bobby1"</span>)</span><br><span class="line">    print(com1.staffs)</span><br><span class="line"></span><br><span class="line">    com2 = Company(<span class="string">"com2"</span>)</span><br><span class="line">    com2.add(<span class="string">"bobby"</span>)</span><br><span class="line">    print(com2.staffs)</span><br><span class="line"></span><br><span class="line">    print(Company.__init__.__defaults__)</span><br><span class="line"></span><br><span class="line">    com3 = Company(<span class="string">"com3"</span>)</span><br><span class="line">    com3.add(<span class="string">"bobby5"</span>)</span><br><span class="line">    <span class="comment"># 因为初始化时用，staffs=[]，在内存中是同一个地址下的同一个列表，所以com2,com3的staffs是同一个。</span></span><br><span class="line">    print(com2.staffs)</span><br><span class="line">    print(com3.staffs)</span><br><span class="line">    print(com2.staffs <span class="keyword">is</span> com3.staffs)</span><br><span class="line"></span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    b = <span class="number">2</span></span><br><span class="line">    c = add(a, b)</span><br><span class="line">    print(c)</span><br><span class="line">    print(a, b)</span><br><span class="line"></span><br><span class="line">    a = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">    b = [<span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">    c = add(a, b)</span><br><span class="line">    print(c)</span><br><span class="line">    print(a, b)</span><br><span class="line"></span><br><span class="line">    a = (<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    b = (<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">    c = add(a, b)</span><br><span class="line">    print(c)</span><br><span class="line">    print(a, b)</span><br></pre></td></tr></table></figure><h1 id="第八章-元类编程"><a href="#第八章-元类编程" class="headerlink" title="第八章 元类编程"></a>第八章 元类编程</h1><h4 id="property属性"><a href="#property属性" class="headerlink" title="property属性"></a>property属性</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> date, datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, birthday)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.birthday = birthday</span><br><span class="line">        self._age = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># def get_age(self):</span></span><br><span class="line">    <span class="comment">#     return datetime.now().year - self.birthday.year</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> datetime.now().year - self.birthday.year</span><br><span class="line"></span><br><span class="line"><span class="meta">    @age.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        self._age = value</span><br><span class="line"></span><br><span class="line"><span class="meta">    @age.deleter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">del</span> self._age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    user = User(<span class="string">"bobby"</span>, date(year=<span class="number">1987</span>, month=<span class="number">1</span>, day=<span class="number">1</span>))</span><br><span class="line">    user.age = <span class="number">30</span></span><br><span class="line">    print(user._age)</span><br><span class="line">    print(user.age)</span><br></pre></td></tr></table></figure><h4 id="属性描述符"><a href="#属性描述符" class="headerlink" title="属性描述符"></a>属性描述符</h4><p>获取的属性如果是一个变量，那么用getattr函数就比较方便，例如：getattr(user, name)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">如果user是某个类的实例，那么user.age（以及等价的getattr(user,’age’)）</span></span><br><span class="line"><span class="string">首先调用__getattribute__。</span></span><br><span class="line"><span class="string">如果类定义了__getattr__方法，那么在__getattribute__抛出 AttributeError 的时候就会调用到__getattr__，而对于描述符(__get__）的调用，则是发生在__getattribute__内部的。</span></span><br><span class="line"><span class="string">user = User(), 那么user.age 顺序如下：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">（1）如果“age”是出现在User或其基类的__dict__中， 且age是data descriptor(数据属性描述符)， 那么调用其__get__方法, 否则</span></span><br><span class="line"><span class="string">（2）如果“age”出现在user的__dict__中， 那么直接返回 obj.__dict__[‘age’]， 否则</span></span><br><span class="line"><span class="string">（3）如果“age”出现在User或其基类的__dict__中</span></span><br><span class="line"><span class="string">（3.1）如果age是non-data descriptor（非数据属性描述符），那么调用其__get__方法， 否则</span></span><br><span class="line"><span class="string">（3.2）返回 __dict__[‘age’]</span></span><br><span class="line"><span class="string">（4）如果User有__getattr__方法，调用__getattr__方法，否则</span></span><br><span class="line"><span class="string">（5）抛出AttributeError</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">只要实现__get__、set、__delete__方法中的一个就可以认为是属性描述符；</span></span><br><span class="line"><span class="string">只实现__get__方法的对象是非数据属性描述符，在初始化之后它们只能被读取；</span></span><br><span class="line"><span class="string">同时实现__get__和__set__的对象是数据属性描述符，这种属性是可读写的。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntField</span>:</span></span><br><span class="line">    <span class="comment">#数据属性描述符</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span>  <span class="comment"># 获取属性</span></span><br><span class="line">        <span class="keyword">return</span> self.value</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span>  <span class="comment"># 设置属性</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(value, numbers.Integral):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">"int value need"</span>)</span><br><span class="line">        <span class="keyword">if</span> value &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">"positive value need"</span>)</span><br><span class="line">        self.value = value</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delete__</span><span class="params">(self, instance)</span>:</span>  <span class="comment"># 删除属性</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NonDataIntField</span>:</span></span><br><span class="line">    <span class="comment">#非数据属性描述符</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.value</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>:</span></span><br><span class="line">    age = IntField()</span><br><span class="line">    <span class="comment"># age = NonDataIntField()</span></span><br></pre></td></tr></table></figure><h4 id="自定义元类"><a href="#自定义元类" class="headerlink" title="自定义元类"></a>自定义元类</h4><p>什么是元类， 元类是创建类的类 对象&lt;-class(对象)&lt;-type</p><p>创建类的方法有三种：</p><p>方法一：</p><p>通过函数动态创建</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_class</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> name == <span class="string">"user"</span>:</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">User</span>:</span></span><br><span class="line">            <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">                <span class="keyword">return</span> <span class="string">"user"</span></span><br><span class="line">        <span class="keyword">return</span> User</span><br><span class="line">    <span class="keyword">elif</span> name == <span class="string">"company"</span>:</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Company</span>:</span></span><br><span class="line">            <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">                <span class="keyword">return</span> <span class="string">"company"</span></span><br><span class="line">        <span class="keyword">return</span> Company</span><br></pre></td></tr></table></figure><p>方法二：</p><p>通过type创建，类也是对象，type是创建类的类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"i am user"</span></span><br><span class="line">    <span class="comment"># return self.name</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseClass</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">answer</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"i am baseclass"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#type动态创建类</span></span><br><span class="line"><span class="comment"># User = type("User", (), &#123;&#125;)</span></span><br><span class="line">User = type(<span class="string">"User"</span>, (BaseClass, ), &#123;<span class="string">"name"</span>:<span class="string">"user"</span>, <span class="string">"say"</span>:say&#125;)</span><br></pre></td></tr></table></figure><p>方法三：</p><p>metaclass</p><p>python中的类的实例化过程：会首先寻找metaclass，通过metaclass里的<code>__new__</code>方法实例化一个实例对象，如果自己的metaclass找不到，会向上一级寻找父类的metaclass</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MetaClass</span><span class="params">(type)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> super().__new__(cls, *args, **kwargs)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(metaclass=MetaClass)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"user"</span></span><br></pre></td></tr></table></figure><h4 id="通过元类实现ORM"><a href="#通过元类实现ORM" class="headerlink" title="通过元类实现ORM"></a>通过元类实现ORM</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 需求</span></span><br><span class="line"><span class="keyword">import</span> numbers</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Field</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntField</span><span class="params">(Field)</span>:</span></span><br><span class="line">    <span class="comment"># 数据描述符</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, db_column, min_value=None, max_value=None)</span>:</span></span><br><span class="line">        self._value = <span class="literal">None</span></span><br><span class="line">        self.min_value = min_value</span><br><span class="line">        self.max_value = max_value</span><br><span class="line">        self.db_column = db_column</span><br><span class="line">        <span class="keyword">if</span> min_value <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> isinstance(min_value, numbers.Integral):</span><br><span class="line">                <span class="keyword">raise</span> ValueError(<span class="string">"min_value must be int"</span>)</span><br><span class="line">            <span class="keyword">elif</span> min_value &lt; <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">raise</span> ValueError(<span class="string">"min_value must be positive int"</span>)</span><br><span class="line">        <span class="keyword">if</span> max_value <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> isinstance(max_value, numbers.Integral):</span><br><span class="line">                <span class="keyword">raise</span> ValueError(<span class="string">"max_value must be int"</span>)</span><br><span class="line">            <span class="keyword">elif</span> max_value &lt; <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">raise</span> ValueError(<span class="string">"max_value must be positive int"</span>)</span><br><span class="line">        <span class="keyword">if</span> min_value <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> max_value <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> min_value &gt; max_value:</span><br><span class="line">                <span class="keyword">raise</span> ValueError(<span class="string">"min_value must be smaller than max_value"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(value, numbers.Integral):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">"int value need"</span>)</span><br><span class="line">        <span class="keyword">if</span> value &lt; self.min_value <span class="keyword">or</span> value &gt; self.max_value:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">"value must between min_value and max_value"</span>)</span><br><span class="line">        self._value = value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CharField</span><span class="params">(Field)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, db_column, max_length=None)</span>:</span></span><br><span class="line">        self._value = <span class="literal">None</span></span><br><span class="line">        self.db_column = db_column</span><br><span class="line">        <span class="keyword">if</span> max_length <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">"you must spcify max_lenth for charfiled"</span>)</span><br><span class="line">        self.max_length = max_length</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(value, str):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">"string value need"</span>)</span><br><span class="line">        <span class="keyword">if</span> len(value) &gt; self.max_length:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">"value len excess len of max_length"</span>)</span><br><span class="line">        self._value = value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModelMetaClass</span><span class="params">(type)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, name, bases, attrs, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> name == <span class="string">"BaseModel"</span>:</span><br><span class="line">            <span class="keyword">return</span> super().__new__(cls, name, bases, attrs, **kwargs)</span><br><span class="line">        fields = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> key, value <span class="keyword">in</span> attrs.items():</span><br><span class="line">            <span class="keyword">if</span> isinstance(value, Field):</span><br><span class="line">                fields[key] = value</span><br><span class="line">        attrs_meta = attrs.get(<span class="string">"Meta"</span>, <span class="literal">None</span>)</span><br><span class="line">        _meta = &#123;&#125;</span><br><span class="line">        db_table = name.lower()</span><br><span class="line">        <span class="keyword">if</span> attrs_meta <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            table = getattr(attrs_meta, <span class="string">"db_table"</span>, <span class="literal">None</span>)</span><br><span class="line">            <span class="keyword">if</span> table <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                db_table = table</span><br><span class="line">        _meta[<span class="string">"db_table"</span>] = db_table</span><br><span class="line">        attrs[<span class="string">"_meta"</span>] = _meta</span><br><span class="line">        attrs[<span class="string">"fields"</span>] = fields</span><br><span class="line">        <span class="keyword">del</span> attrs[<span class="string">"Meta"</span>]</span><br><span class="line">        <span class="keyword">return</span> super().__new__(cls, name, bases, attrs, **kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseModel</span><span class="params">(metaclass=ModelMetaClass)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> key, value <span class="keyword">in</span> kwargs.items():</span><br><span class="line">            setattr(self, key, value)</span><br><span class="line">        <span class="keyword">return</span> super().__init__()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">(self)</span>:</span></span><br><span class="line">        fields = []</span><br><span class="line">        values = []</span><br><span class="line">        <span class="keyword">for</span> key, value <span class="keyword">in</span> self.fields.items():</span><br><span class="line">            db_column = value.db_column</span><br><span class="line">            <span class="keyword">if</span> db_column <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                db_column = key.lower()</span><br><span class="line">            fields.append(db_column)</span><br><span class="line">            value = getattr(self, key)</span><br><span class="line">            values.append(str(value))</span><br><span class="line"></span><br><span class="line">        sql = <span class="string">"insert &#123;db_table&#125;(&#123;fields&#125;) value(&#123;values&#125;)"</span>.format(db_table=self._meta[<span class="string">"db_table"</span>],</span><br><span class="line">                                                                   fields=<span class="string">","</span>.join(fields), values=<span class="string">","</span>.join(values))</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(BaseModel)</span>:</span></span><br><span class="line">    name = CharField(db_column=<span class="string">"name"</span>, max_length=<span class="number">10</span>)</span><br><span class="line">    age = IntField(db_column=<span class="string">"age"</span>, min_value=<span class="number">1</span>, max_value=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">"user"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    user = User(name=<span class="string">"bobby"</span>, age=<span class="number">28</span>)</span><br><span class="line">    <span class="comment"># user.name = "bobby"</span></span><br><span class="line">    <span class="comment"># user.age = 28</span></span><br><span class="line">    user.save()</span><br></pre></td></tr></table></figure><h1 id="第九章-迭代器和生成器"><a href="#第九章-迭代器和生成器" class="headerlink" title="第九章 迭代器和生成器"></a>第九章 迭代器和生成器</h1><h4 id="可迭代对象和迭代器"><a href="#可迭代对象和迭代器" class="headerlink" title="可迭代对象和迭代器"></a>可迭代对象和迭代器</h4><p>list是可迭代对象，而不是迭代器</p><p>实现<code>__item__</code>方法即是可迭代对象，而<code>__item__</code>方法必须要return一个迭代器</p><p>实现<code>__item__</code>方法和<code>__next__</code>方法即是迭代器，而<code>__item__</code>方法要return self，<code>__next__</code>方法实现遍历。</p><p>在创建一个可迭代对象时尽量不要定义<code>__next__</code>方法，要单独创建一个迭代器，然后在这个可迭代对象的<code>__item__</code>方法里return这个迭代器即可，分开维护比较好。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections.abc <span class="keyword">import</span> Iterator</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Company</span><span class="params">(object)</span>:</span>  <span class="comment"># 是可迭代对象</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, employee_list)</span>:</span></span><br><span class="line">        self.employee = employee_list</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> MyIterator(self.employee)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyIterator</span><span class="params">(Iterator)</span>:</span>  <span class="comment"># 是迭代器，因为继承了Iterator，所以无需再写__item__方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, employee_list)</span>:</span></span><br><span class="line">        self.iter_list = employee_list</span><br><span class="line">        self.index = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#真正返回迭代值的逻辑</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            word = self.iter_list[self.index]</span><br><span class="line">        <span class="keyword">except</span> IndexError:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line">        self.index += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> word</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    company = Company([<span class="string">"tom"</span>, <span class="string">"bob"</span>, <span class="string">"jane"</span>])</span><br><span class="line">    my_itor = iter(company)</span><br><span class="line">    <span class="comment"># while True:</span></span><br><span class="line">    <span class="comment">#     try:</span></span><br><span class="line">    <span class="comment">#         print (next(my_itor))</span></span><br><span class="line">    <span class="comment">#     except StopIteration:</span></span><br><span class="line">    <span class="comment">#         pass</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> company:</span><br><span class="line">        <span class="keyword">print</span> (item)</span><br></pre></td></tr></table></figure><h4 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h4><p>调用生成器函数，返回的是一个生成器的对象</p><p>生成器的应用：大文件读取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 500G, 特殊 一行</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myreadlines</span><span class="params">(f, newline)</span>:</span></span><br><span class="line">    buf = <span class="string">""</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">while</span> newline <span class="keyword">in</span> buf:</span><br><span class="line">            pos = buf.index(newline)</span><br><span class="line">            <span class="keyword">yield</span> buf[:pos]</span><br><span class="line">            buf = buf[pos + len(newline):]</span><br><span class="line">        chunk = f.read(<span class="number">4096</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> chunk:</span><br><span class="line">            <span class="comment"># 说明已经读到了文件结尾</span></span><br><span class="line">            <span class="keyword">yield</span> buf</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        buf += chunk</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"input.txt"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> myreadlines(f, <span class="string">"&#123;|&#125;"</span>):</span><br><span class="line">        print(line)</span><br></pre></td></tr></table></figure><h1 id="第十章-python-socket编程"><a href="#第十章-python-socket编程" class="headerlink" title="第十章 python socket编程"></a>第十章 python socket编程</h1><h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">client.connect((<span class="string">'127.0.0.1'</span>, <span class="number">8000</span>))</span><br><span class="line">client.send(<span class="string">"bobby"</span>.encode(<span class="string">"utf8"</span>))</span><br><span class="line">data = client.recv(<span class="number">1024</span>)</span><br><span class="line">print(data.decode(<span class="string">"utf8"</span>))</span><br><span class="line">client.close()</span><br></pre></td></tr></table></figure><h4 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">server.bind((<span class="string">'0.0.0.0'</span>, <span class="number">8000</span>))</span><br><span class="line">server.listen()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_sock</span><span class="params">(sock, addr)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data = sock.recv(<span class="number">1024</span>)</span><br><span class="line">        print(data.decode(<span class="string">"utf8"</span>))</span><br><span class="line">        re_data = input()</span><br><span class="line">        sock.send(re_data.encode(<span class="string">"utf8"</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    sock, addr = server.accept()</span><br><span class="line">    client_thread = threading.Thread(target=handle_sock, args=(sock, addr))</span><br><span class="line">    client_thread.start()</span><br></pre></td></tr></table></figure><h1 id="第十一章-多线程、多进程和线程池编程"><a href="#第十一章-多线程、多进程和线程池编程" class="headerlink" title="第十一章 多线程、多进程和线程池编程"></a>第十一章 多线程、多进程和线程池编程</h1><h4 id="GIL锁-全局解释器锁"><a href="#GIL锁-全局解释器锁" class="headerlink" title="GIL锁(全局解释器锁)"></a>GIL锁(全局解释器锁)</h4><ol><li>Python语言和GIL没有半毛钱关系。仅仅是由于历史原因在Cpython虚拟机(解释器)，难以移除GIL。</li><li>GIL：全局解释器锁。每个线程在执行的过程都需要先获取GIL，保证同一时刻只有一个线程可以执行代码。</li><li>线程释放GIL锁的情况： 在IO操作等可能会引起阻塞的system call之前,可以暂时释放GIL,但在执行完毕后,必须重新获取GIL Python 3.x使用计时器（执行时间达到阈值后，当前线程释放GIL）或Python 2.x，tickets计数达到100</li><li>Python使用多进程是可以利用多核的CPU资源的。</li><li>多线程爬取比单线程性能有提升，因为遇到IO阻塞会自动释放GIL锁</li></ol><h4 id="多线程编程"><a href="#多线程编程" class="headerlink" title="多线程编程"></a>多线程编程</h4><p>方法一：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_detail_html</span><span class="params">(url)</span>:</span></span><br><span class="line">    print(<span class="string">"get detail html started"</span>)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">"get detail html end"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_detail_url</span><span class="params">(url)</span>:</span></span><br><span class="line">    print(<span class="string">"get detail url started"</span>)</span><br><span class="line">    time.sleep(<span class="number">4</span>)</span><br><span class="line">    print(<span class="string">"get detail url end"</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span>  __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    thread1 = GetDetailHtml(<span class="string">"get_detail_html"</span>)</span><br><span class="line">    thread2 = GetDetailUrl(<span class="string">"get_detail_url"</span>)</span><br><span class="line">    <span class="comment"># thread1.setDaemon()  # 设置为守护线程，即主线程结束，则子线程即结束</span></span><br><span class="line">    <span class="comment"># thread2.setDaemon()</span></span><br><span class="line">    start_time = time.time()</span><br><span class="line">    thread1.start()</span><br><span class="line">    thread2.start()</span><br><span class="line">    thread1.join()  <span class="comment"># 子线程结束后再运行主线程</span></span><br><span class="line">    thread2.join()</span><br><span class="line">    <span class="comment">#当主线程退出的时候， 子线程kill掉</span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"last time: &#123;&#125;"</span>.format(time.time()-start_time))</span><br></pre></td></tr></table></figure><p>方法二：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetDetailHtml</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        super().__init__(name=name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"get detail html started"</span>)</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        print(<span class="string">"get detail html end"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetDetailUrl</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        super().__init__(name=name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"get detail url started"</span>)</span><br><span class="line">        time.sleep(<span class="number">4</span>)</span><br><span class="line">        print(<span class="string">"get detail url end"</span>)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span>  __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    thread1 = GetDetailHtml(<span class="string">"get_detail_html"</span>)</span><br><span class="line">    thread2 = GetDetailUrl(<span class="string">"get_detail_url"</span>)</span><br><span class="line">    thread1.start()</span><br><span class="line">    thread2.start()</span><br></pre></td></tr></table></figure><h4 id="线程间通信-共享变量和Queue"><a href="#线程间通信-共享变量和Queue" class="headerlink" title="线程间通信-共享变量和Queue"></a>线程间通信-共享变量和Queue</h4><p>从其他文件导入全局变量时尽量使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> capter <span class="keyword">import</span> variables</span><br><span class="line">variables.detail_url_list</span><br></pre></td></tr></table></figure><p>而不要使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> capter.variables <span class="keyword">import</span> detail_url_list</span><br></pre></td></tr></table></figure><p>Queue用例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_detail_html</span><span class="params">(queue)</span>:</span></span><br><span class="line">    <span class="comment">#爬取文章详情页</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        url = queue.get()</span><br><span class="line">        <span class="comment"># for url in detail_url_list:</span></span><br><span class="line">        print(<span class="string">"get detail html started"</span>)</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        print(<span class="string">"get detail html end"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_detail_url</span><span class="params">(queue)</span>:</span></span><br><span class="line">    <span class="comment"># 爬取文章列表页</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        print(<span class="string">"get detail url started"</span>)</span><br><span class="line">        time.sleep(<span class="number">4</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line">            queue.put(<span class="string">"http://projectsedu.com/&#123;id&#125;"</span>.format(id=i))</span><br><span class="line">        print(<span class="string">"get detail url end"</span>)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span>  __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">detail_url_queue = Queue(maxsize=<span class="number">1000</span>)</span><br><span class="line">thread_detail_url = threading.Thread(target=get_detail_url, args=(detail_url_queue,))</span><br><span class="line">  html_thread = threading.Thread(target=get_detail_html, args=(detail_url_queue,))</span><br><span class="line">  thread_detail_url.start()</span><br><span class="line">  html_thread.start()</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 以下两个是在不同地方成对使用，detail_url_queue.join()是从queue的角度阻塞主线程，当我们想要取消阻塞时，即达到我们想要的某个条件时，调用detail_url_queue.task_done()即可取消阻塞</span></span><br><span class="line">detail_url_queue.task_done()</span><br><span class="line">detail_url_queue.join()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#通过queue的方式进行线程间同步</span></span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_detail_html</span><span class="params">(queue)</span>:</span></span><br><span class="line">    <span class="comment">#爬取文章详情页</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        url = queue.get()</span><br><span class="line">        <span class="comment"># for url in detail_url_list:</span></span><br><span class="line">        print(<span class="string">"get detail html started"</span>)</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        print(<span class="string">"get detail html end"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_detail_url</span><span class="params">(queue)</span>:</span></span><br><span class="line">    <span class="comment"># 爬取文章列表页</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        print(<span class="string">"get detail url started"</span>)</span><br><span class="line">        time.sleep(<span class="number">4</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line">            queue.put(<span class="string">"http://projectsedu.com/&#123;id&#125;"</span>.format(id=i))</span><br><span class="line">        print(<span class="string">"get detail url end"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#1. 线程通信方式- 共享变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>  __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    detail_url_queue = Queue(maxsize=<span class="number">1000</span>)</span><br><span class="line">    thread_detail_url = threading.Thread(target=get_detail_url, args=(detail_url_queue,))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        html_thread = threading.Thread(target=get_detail_html, args=(detail_url_queue,))</span><br><span class="line">        html_thread.start()</span><br><span class="line">    <span class="comment"># # thread2 = GetDetailUrl("get_detail_url")</span></span><br><span class="line">    start_time = time.time()</span><br><span class="line">    <span class="comment"># thread_detail_url.start()</span></span><br><span class="line">    <span class="comment"># thread_detail_url1.start()</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># thread1.join()</span></span><br><span class="line">    <span class="comment"># thread2.join()</span></span><br><span class="line">    detail_url_queue.task_done()</span><br><span class="line">    detail_url_queue.join()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#当主线程退出的时候， 子线程kill掉</span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"last time: &#123;&#125;"</span>.format(time.time()-start_time))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 优先级队列(后插入的先取出)</span></span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> PriorityQueue</span><br></pre></td></tr></table></figure><h4 id="线程同步-Lock、RLock"><a href="#线程同步-Lock、RLock" class="headerlink" title="线程同步 - Lock、RLock"></a>线程同步 - Lock、RLock</h4><p>Lock锁</p><p>因为上锁和解锁需要时间，所以锁会影响性能</p><p>可能会出现死锁</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Lock </span><br><span class="line"></span><br><span class="line">total = <span class="number">0</span></span><br><span class="line">lock = Lock()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#1. dosomething1</span></span><br><span class="line">    <span class="comment">#2. io操作</span></span><br><span class="line">    <span class="comment"># 1. dosomething3</span></span><br><span class="line">    <span class="keyword">global</span> lock</span><br><span class="line">    <span class="keyword">global</span> total</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000000</span>):</span><br><span class="line">        lock.acquire()</span><br><span class="line">        total += <span class="number">1</span></span><br><span class="line">        lock.release()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">desc</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> total</span><br><span class="line">    <span class="keyword">global</span> lock</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000000</span>):</span><br><span class="line">        lock.acquire()</span><br><span class="line">        total -= <span class="number">1</span></span><br><span class="line">        lock.release()</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line">thread1 = threading.Thread(target=add)</span><br><span class="line">thread2 = threading.Thread(target=desc)</span><br><span class="line">thread1.start()</span><br><span class="line">thread2.start()</span><br><span class="line">thread1.join()</span><br><span class="line">thread2.join()</span><br><span class="line">print(total)</span><br><span class="line"></span><br><span class="line"><span class="comment">#1. 用锁会影响性能</span></span><br><span class="line"><span class="comment">#2. 锁会引起死锁</span></span><br></pre></td></tr></table></figure><p>Rlock</p><p>lock.acquire()在同一个线程内不能连续出现，否则会出现死锁,即：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#1. dosomething1</span></span><br><span class="line">    <span class="comment">#2. io操作</span></span><br><span class="line">    <span class="comment"># 1. dosomething3</span></span><br><span class="line">    <span class="keyword">global</span> lock</span><br><span class="line">    <span class="keyword">global</span> total</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000000</span>):</span><br><span class="line">        lock.acquire()</span><br><span class="line">        do_someing()</span><br><span class="line">        total += <span class="number">1</span></span><br><span class="line">        lock.release()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_someing</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">lock</span>.<span class="title">acquire</span><span class="params">()</span></span></span><br><span class="line">total += 2</span><br><span class="line">lock.release()</span><br></pre></td></tr></table></figure><p>此种问题可用Rlock解决，注意，有多少lock.acquire()就要有多少lock.release()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> RLock</span><br><span class="line"></span><br><span class="line">total = <span class="number">0</span></span><br><span class="line">lock = RLock()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#1. dosomething1</span></span><br><span class="line">    <span class="comment">#2. io操作</span></span><br><span class="line">    <span class="comment"># 1. dosomething3</span></span><br><span class="line">    <span class="keyword">global</span> lock</span><br><span class="line">    <span class="keyword">global</span> total</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000000</span>):</span><br><span class="line">        lock.acquire()</span><br><span class="line">        lock.acquire()</span><br><span class="line">        total += <span class="number">1</span></span><br><span class="line">        lock.release()</span><br><span class="line">        lock.release()</span><br></pre></td></tr></table></figure><h4 id="condition"><a href="#condition" class="headerlink" title="condition"></a>condition</h4><p>是条件变量， 用于复杂的线程间同步</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#通过condition完成协同读诗</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XiaoAi</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, cond)</span>:</span></span><br><span class="line">        super().__init__(name=<span class="string">"小爱"</span>)</span><br><span class="line">        self.cond = cond</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> self.cond:</span><br><span class="line">            self.cond.wait()</span><br><span class="line">            print(<span class="string">"&#123;&#125; : 在 "</span>.format(self.name))</span><br><span class="line">            self.cond.notify()</span><br><span class="line"></span><br><span class="line">            self.cond.wait()</span><br><span class="line">            print(<span class="string">"&#123;&#125; : 好啊 "</span>.format(self.name))</span><br><span class="line">            self.cond.notify()</span><br><span class="line"></span><br><span class="line">            self.cond.wait()</span><br><span class="line">            print(<span class="string">"&#123;&#125; : 君住长江尾 "</span>.format(self.name))</span><br><span class="line">            self.cond.notify()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TianMao</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, cond)</span>:</span></span><br><span class="line">        super().__init__(name=<span class="string">"天猫精灵"</span>)</span><br><span class="line">        self.cond = cond</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> self.cond:</span><br><span class="line">            print(<span class="string">"&#123;&#125; : 小爱同学 "</span>.format(self.name))</span><br><span class="line">            self.cond.notify()</span><br><span class="line">            self.cond.wait()</span><br><span class="line"></span><br><span class="line">            print(<span class="string">"&#123;&#125; : 我们来对古诗吧 "</span>.format(self.name))</span><br><span class="line">            self.cond.notify()</span><br><span class="line">            self.cond.wait()</span><br><span class="line"></span><br><span class="line">            print(<span class="string">"&#123;&#125; : 我住长江头 "</span>.format(self.name))</span><br><span class="line">            self.cond.notify()</span><br><span class="line">            self.cond.wait()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">from</span> concurrent <span class="keyword">import</span> futures</span><br><span class="line">    cond = threading.Condition()</span><br><span class="line">    xiaoai = XiaoAi(cond)</span><br><span class="line">    tianmao = TianMao(cond)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#启动顺序很重要</span></span><br><span class="line">    <span class="comment">#在调用with cond之后才能调用wait或者notify方法</span></span><br><span class="line">    <span class="comment">#condition有两层锁， 一把底层锁会在线程调用了wait方法的时候释放， 上面的锁会在每次调用wait的时候分配一把并放入到cond的等待队列中，等到notify方法的唤醒</span></span><br><span class="line">    xiaoai.start()</span><br><span class="line">    tianmao.start()</span><br></pre></td></tr></table></figure><h4 id="semaphore"><a href="#semaphore" class="headerlink" title="semaphore"></a>semaphore</h4><p>semaphore是利用condition实现用于控制进入数量的锁</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Semaphore 是用于控制进入数量的锁</span></span><br><span class="line"><span class="comment">#文件， 读、写， 写一般只是用于一个线程写，读可以允许有多个</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#做爬虫</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HtmlSpider</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, url, sem)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.url = url</span><br><span class="line">        self.sem = sem</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        print(<span class="string">"got html text success"</span>)</span><br><span class="line">        self.sem.release()  <span class="comment"># 任务结束，释放锁</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UrlProducer</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, sem)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.sem = sem</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line">            self.sem.acquire()  <span class="comment"># 上锁，当数量大于3的时候阻塞</span></span><br><span class="line">            html_thread = HtmlSpider(<span class="string">"https://baidu.com/&#123;&#125;"</span>.format(i), self.sem)</span><br><span class="line">            html_thread.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    sem = threading.Semaphore(<span class="number">3</span>)  <span class="comment"># 实例化Semaphore，限制同时最大数量为3</span></span><br><span class="line">    url_producer = UrlProducer(sem)</span><br><span class="line">    url_producer.start()</span><br></pre></td></tr></table></figure><h4 id="ThreadPoolExecutor线程池"><a href="#ThreadPoolExecutor线程池" class="headerlink" title="ThreadPoolExecutor线程池"></a>ThreadPoolExecutor线程池</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor, as_completed, wait, FIRST_COMPLETED</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> Future</span><br><span class="line"></span><br><span class="line"><span class="comment"># future未来对象，或者叫task的返回容器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#线程池， 为什么要线程池</span></span><br><span class="line"><span class="comment">#主线程中可以获取某一个线程的状态或者某一个任务的状态，以及返回值</span></span><br><span class="line"><span class="comment">#当一个线程完成的时候我们主线程能立即知道</span></span><br><span class="line"><span class="comment">#futures可以让多线程和多进程编码接口一致</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_html</span><span class="params">(times)</span>:</span></span><br><span class="line">    time.sleep(times)</span><br><span class="line">    print(<span class="string">"get page &#123;&#125; success"</span>.format(times))</span><br><span class="line">    <span class="keyword">return</span> times</span><br><span class="line"></span><br><span class="line">executor = ThreadPoolExecutor(max_workers=<span class="number">2</span>)</span><br><span class="line"><span class="comment">#通过submit函数提交执行的函数到线程池中, submit 是立即返回</span></span><br><span class="line">task1 = executor.submit(get_html, (<span class="number">3</span>))</span><br><span class="line">task2 = executor.submit(get_html, (<span class="number">2</span>))</span><br><span class="line"><span class="comment"># task1和task2就是future对象</span></span><br><span class="line"><span class="comment"># done方法用于判定某个任务是否完成</span></span><br><span class="line">print(task1.done())</span><br><span class="line">print(task2.cancel())  <span class="comment"># 取消某个还没运行的任务</span></span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line">print(task1.done())</span><br><span class="line"><span class="comment"># result方法可以获取task的执行结果</span></span><br><span class="line">print(task1.result())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 要获取已经成功的task的返回</span></span><br><span class="line"><span class="comment"># 方法一，返回是按照任务成功的先后</span></span><br><span class="line">urls = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>]</span><br><span class="line">all_task = [executor.submit(get_html, (url)) <span class="keyword">for</span> url <span class="keyword">in</span> urls]</span><br><span class="line"><span class="keyword">for</span> future <span class="keyword">in</span> as_completed(all_task):</span><br><span class="line">    data = future.result()</span><br><span class="line">    print(<span class="string">"get &#123;&#125; page"</span>.format(data))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二， 返回是按照urls里的顺序</span></span><br><span class="line"><span class="comment">#通过executor的map获取已经完成的task的值</span></span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> executor.map(get_html, urls):</span><br><span class="line">    print(<span class="string">"get &#123;&#125; page"</span>.format(data))</span><br><span class="line">    </span><br><span class="line"><span class="comment"># wait函数是等待一定条件（默认是所有任务执行完）满足后再继续执行主线程</span></span><br><span class="line"><span class="comment"># return_when=FIRST_COMPLETED 参数是完成第一个任务后就继续执行主线程</span></span><br><span class="line">wait(all_task, return_when=FIRST_COMPLETED)</span><br><span class="line">print(<span class="string">"main"</span>)</span><br></pre></td></tr></table></figure><h4 id="multiprocessing-多进程编程"><a href="#multiprocessing-多进程编程" class="headerlink" title="multiprocessing 多进程编程"></a>multiprocessing 多进程编程</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_html</span><span class="params">(n)</span>:</span></span><br><span class="line">    time.sleep(n)</span><br><span class="line">    print(<span class="string">"sub_progress success"</span>)</span><br><span class="line">    <span class="keyword">return</span> n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    progress = multiprocessing.Process(target=get_html, args=(<span class="number">2</span>,))</span><br><span class="line">    print(progress.pid)</span><br><span class="line">    progress.start()</span><br><span class="line">    print(progress.pid)</span><br><span class="line">    progress.join()</span><br><span class="line">    print(<span class="string">"main progress end"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用线程池</span></span><br><span class="line">    pool = multiprocessing.Pool(multiprocessing.cpu_count())  <span class="comment"># 进程开启数量为cpu核心数</span></span><br><span class="line">    result = pool.apply_async(get_html, args=(<span class="number">3</span>,))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 等待所有任务完成</span></span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()  <span class="comment"># join()前必须先close()否则会报错</span></span><br><span class="line">    </span><br><span class="line">    print(result.get())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># imap 运行结果顺序为添加参数的顺序，即1,5,3</span></span><br><span class="line">    <span class="keyword">for</span> result <span class="keyword">in</span> pool.imap(get_html, [<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>]):</span><br><span class="line">        print(<span class="string">"&#123;&#125; sleep success"</span>.format(result))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># imap_unordered 运行结果的顺序为执行时间的顺序，即1，3，5</span></span><br><span class="line">    <span class="keyword">for</span> result <span class="keyword">in</span> pool.imap_unordered(get_html, [<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>]):</span><br><span class="line">        print(<span class="string">"&#123;&#125; sleep success"</span>.format(result))</span><br></pre></td></tr></table></figure><h4 id="进程间通信-Queue、Pipe，Manager"><a href="#进程间通信-Queue、Pipe，Manager" class="headerlink" title="进程间通信 - Queue、Pipe，Manager"></a>进程间通信 - Queue、Pipe，Manager</h4><p>multiprocessing.Queue</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Queue, Pool</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">producer</span><span class="params">(queue)</span>:</span></span><br><span class="line">    queue.put(<span class="string">"a"</span>)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumer</span><span class="params">(queue)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    data = queue.get()</span><br><span class="line">    print(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    queue = Queue(<span class="number">10</span>)</span><br><span class="line">    my_producer = Process(target=producer, args=(queue,))</span><br><span class="line">    my_consumer = Process(target=consumer, args=(queue,))</span><br><span class="line">    my_producer.start()</span><br><span class="line">    my_consumer.start()</span><br><span class="line">    my_producer.join()</span><br><span class="line">    my_consumer.join()</span><br></pre></td></tr></table></figure><p>Manager().Queue</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Manage, Pool</span><br><span class="line"><span class="comment"># multiprocessing中的queue不能用于pool进程池</span></span><br><span class="line"><span class="comment"># pool中的进程间通信需要使用manager中的queue</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">producer</span><span class="params">(queue)</span>:</span></span><br><span class="line">    queue.put(<span class="string">"a"</span>)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumer</span><span class="params">(queue)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    data = queue.get()</span><br><span class="line">    print(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    queue = Manager().Queue(<span class="number">10</span>)</span><br><span class="line">    pool = Pool(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    pool.apply_async(producer, args=(queue,))</span><br><span class="line">    pool.apply_async(consumer, args=(queue,))</span><br><span class="line"></span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br></pre></td></tr></table></figure><p>multiprocessing.Pipe</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Pool, Pipe</span><br><span class="line"><span class="comment">#通过pipe实现进程间通信</span></span><br><span class="line"><span class="comment">#pipe的性能高于queue</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">producer</span><span class="params">(pipe)</span>:</span></span><br><span class="line">    pipe.send(<span class="string">"bobby"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumer</span><span class="params">(pipe)</span>:</span></span><br><span class="line">    print(pipe.recv())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    recevie_pipe, send_pipe = Pipe()</span><br><span class="line">    <span class="comment">#pipe只能适用于两个进程</span></span><br><span class="line">    my_producer= Process(target=producer, args=(send_pipe, ))</span><br><span class="line">    my_consumer = Process(target=consumer, args=(recevie_pipe,))</span><br><span class="line"></span><br><span class="line">    my_producer.start()</span><br><span class="line">    my_consumer.start()</span><br><span class="line">    my_producer.join()</span><br><span class="line">    my_consumer.join()</span><br></pre></td></tr></table></figure><p>Manager().dict()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Manage</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_data</span><span class="params">(p_dict, key, value)</span>:</span></span><br><span class="line">    p_dict[key] = value</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    progress_dict = Manager().dict()</span><br><span class="line">    <span class="keyword">from</span> queue <span class="keyword">import</span> PriorityQueue</span><br><span class="line"></span><br><span class="line">    first_progress = Process(target=add_data, args=(progress_dict, <span class="string">"bobby1"</span>, <span class="number">22</span>))</span><br><span class="line">    second_progress = Process(target=add_data, args=(progress_dict, <span class="string">"bobby2"</span>, <span class="number">23</span>))</span><br><span class="line"></span><br><span class="line">    first_progress.start()</span><br><span class="line">    second_progress.start()</span><br><span class="line">    first_progress.join()</span><br><span class="line">    second_progress.join()</span><br><span class="line"></span><br><span class="line">    print(progress_dict)</span><br></pre></td></tr></table></figure><h1 id="第十二章-协程和异步IO"><a href="#第十二章-协程和异步IO" class="headerlink" title="第十二章 协程和异步IO"></a>第十二章 协程和异步IO</h1><h4 id="并发、并行、同步、异步、阻塞、非阻塞"><a href="#并发、并行、同步、异步、阻塞、非阻塞" class="headerlink" title="并发、并行、同步、异步、阻塞、非阻塞"></a>并发、并行、同步、异步、阻塞、非阻塞</h4><p>并发：是指一个时间段内，有几个程序在同一个CPU上运行，但是任意时刻只有一个程序在CPU上运行。</p><p>并行：是指任意时刻点上，有多个程序同时运行在多个CPU上。</p><p>同步：是指代码调用IO操作时，必须等待IO操作完成才返回的调用方式。</p><p>异步：是指代码调用IO操作时，不必等IO操作完成就返回的调用方式。</p><p>阻塞：是指调用函数时候当前线程被挂起。</p><p>非阻塞：是指调用函数时候当前线程不会被挂起，而是立即返回。</p><h4 id="I-O多路复用"><a href="#I-O多路复用" class="headerlink" title="I/O多路复用"></a>I/O多路复用</h4><p>Unix下五种I/O模型：</p><p>阻塞式I/O、非阻塞式I/O、I/O复用、信号驱动式I/O，异步I/O(POSIX的aio_系列函数)</p><p><img src="/2020/05/16/python/Python%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E5%92%8C%E5%BC%82%E6%AD%A5IO%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/WX20190616-162543@2x.png" alt></p><p><img src="/2020/05/16/python/Python%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E5%92%8C%E5%BC%82%E6%AD%A5IO%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/WX20190616-162613@2x.png" alt></p><p>阻塞式I/O优于非阻塞式I/O的情况：</p><p>非阻塞式I/O不一定就好于阻塞式I/O，例如client.connect((host, 80))是阻塞式I/O，在此之后如果是执行client.send()，因为连接成功后才可以send，所以如果用client.setblocking(False)把它设置成非阻塞式I/O，那么在send之前就要不停的询问连接是否建立好， 需要while循环不停的去检查状态，否则如果没建立好连接就send，就可能会报错，阻塞式I/O不消耗CPU，而此时用while循环反而消耗CPU。</p><p>非阻塞式I/O优于阻塞式I/O的情况：</p><p>如果client.connect((host, 80))之后不是执行client.send()操作，而是做计算任务或者再次发起其他的连接请求，那么设置成非阻塞I/O，立刻执行下面的操作就不会报错，从而是提升了效率。</p><p><img src="/2020/05/16/python/Python%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E5%92%8C%E5%BC%82%E6%AD%A5IO%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/WX20190616-163944@2x.png" alt></p><p>select是操作系统提供的函数，加入现在有100scoket连接，调用select函数，可以得到哪些socket连接完成，然后接收数据。</p><p><img src="/2020/05/16/python/Python%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E5%92%8C%E5%BC%82%E6%AD%A5IO%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/WX20190616-164335@2x.png" alt></p><p><img src="/2020/05/16/python/Python%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E5%92%8C%E5%BC%82%E6%AD%A5IO%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/WX20190616-164419@2x.png" alt></p><p><img src="/2020/05/16/python/Python%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E5%92%8C%E5%BC%82%E6%AD%A5IO%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/WX20190616-164924@2x.png" alt></p><p><img src="/2020/05/16/python/Python%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E5%92%8C%E5%BC%82%E6%AD%A5IO%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/WX20190616-165100@2x.png" alt></p><p><img src="/2020/05/16/python/Python%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E5%92%8C%E5%BC%82%E6%AD%A5IO%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/WX20190616-165223@2x.png" alt></p><p><img src="/2020/05/16/python/Python%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E5%92%8C%E5%BC%82%E6%AD%A5IO%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/WX20190616-165312@2x.png" alt></p><ul><li>epoll并不代表一定比select好</li><li>在并发高的情况下，连接活跃度不是很高， epoll比select</li><li>并发性不高，同时连接很活跃， select比epoll好</li></ul><h4 id="select-回调-事件循环获取html"><a href="#select-回调-事件循环获取html" class="headerlink" title="select+回调+事件循环获取html"></a>select+回调+事件循环获取html</h4><p>过程：</p><p>1、把socket文件描述符、事件、回调函数注册进selector</p><p>2、使用loop()事件循环不停的请求socket的状态并调用对应的回调函数(select本身并不会在socket状态变化后调用回调函数，而是需要程序员写一个loop()事件循环的函数，不停请求socket状态，请求到某个socket状态完成，调用对应的回调函数)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#通过非阻塞io实现http请求</span></span><br><span class="line"><span class="comment"># select + 回调 + 事件循环</span></span><br><span class="line"><span class="comment">#  并发性高</span></span><br><span class="line"><span class="comment"># 使用单线程</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</span><br><span class="line"><span class="keyword">from</span> selectors <span class="keyword">import</span> DefaultSelector, EVENT_READ, EVENT_WRITE</span><br><span class="line"></span><br><span class="line">selector = DefaultSelector()</span><br><span class="line"><span class="comment">#使用select完成http请求</span></span><br><span class="line">urls = []</span><br><span class="line">stop = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fetcher</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connected</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        selector.unregister(key.fd)  <span class="comment"># 连接建立好之后要取消注册</span></span><br><span class="line">        self.client.send(<span class="string">"GET &#123;&#125; HTTP/1.1\r\nHost:&#123;&#125;\r\nConnection:close\r\n\r\n"</span>.format(self.path, self.host).encode(<span class="string">"utf8"</span>))</span><br><span class="line">        <span class="comment"># 此处是监听是否可读</span></span><br><span class="line">        selector.register(self.client.fileno(), EVENT_READ, self.readable)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">readable</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        d = self.client.recv(<span class="number">1024</span>)</span><br><span class="line">        <span class="keyword">if</span> d:</span><br><span class="line">            self.data += d</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            selector.unregister(key.fd)</span><br><span class="line">            data = self.data.decode(<span class="string">"utf8"</span>)</span><br><span class="line">            html_data = data.split(<span class="string">"\r\n\r\n"</span>)[<span class="number">1</span>]</span><br><span class="line">            print(html_data)</span><br><span class="line">            self.client.close()</span><br><span class="line">            urls.remove(self.spider_url)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> urls:</span><br><span class="line">                <span class="keyword">global</span> stop</span><br><span class="line">                stop = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_url</span><span class="params">(self, url)</span>:</span></span><br><span class="line">        self.spider_url = url</span><br><span class="line">        url = urlparse(url)</span><br><span class="line">        self.host = url.netloc</span><br><span class="line">        self.path = url.path</span><br><span class="line">        self.data = <span class="string">b""</span></span><br><span class="line">        <span class="keyword">if</span> self.path == <span class="string">""</span>:</span><br><span class="line">            self.path = <span class="string">"/"</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 建立socket连接</span></span><br><span class="line">        self.client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        self.client.setblocking(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.client.connect((self.host, <span class="number">80</span>))  <span class="comment"># 阻塞不会消耗cpu</span></span><br><span class="line">        <span class="keyword">except</span> BlockingIOError <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 注册，self.client.fileno()是socket的文件描述符，注册的是文件描述符</span></span><br><span class="line">        <span class="comment"># 此处是监听是否可写</span></span><br><span class="line">        selector.register(self.client.fileno(), EVENT_WRITE, self.connected)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loop</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#事件循环，不停的请求socket的状态并调用对应的回调函数</span></span><br><span class="line">    <span class="comment">#1. select本身是不支持register模式</span></span><br><span class="line">    <span class="comment">#2. socket状态变化以后的回调是由程序员完成的</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> stop:</span><br><span class="line">        ready = selector.select()</span><br><span class="line">        <span class="keyword">for</span> key, mask <span class="keyword">in</span> ready:</span><br><span class="line">            call_back = key.data</span><br><span class="line">            call_back(key)</span><br><span class="line">    <span class="comment">#回调+事件循环+select(poll\epoll)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    fetcher = Fetcher()</span><br><span class="line">    <span class="keyword">import</span> time</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line">        url = <span class="string">"http://shop.projectsedu.com/goods/&#123;&#125;/"</span>.format(url)</span><br><span class="line">        urls.append(url)</span><br><span class="line">        fetcher = Fetcher()</span><br><span class="line">        fetcher.get_url(url)</span><br><span class="line">    loop()</span><br><span class="line">    print(time.time()-start_time)</span><br></pre></td></tr></table></figure><p><img src="/2020/05/16/python/Python%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E5%92%8C%E5%BC%82%E6%AD%A5IO%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/WX20190616-175035@2x.png" alt></p><ol><li>可读性差</li><li>共享状态管理困难</li><li>异常处理困难</li></ol><h4 id="生成器-1"><a href="#生成器-1" class="headerlink" title="生成器"></a>生成器</h4><ul><li>传统函数调用 过程 A-&gt;B-&gt;C</li><li>我们需要一个可以暂停的函数，并且可以在适当的时候恢复该函数的继续执行</li><li>出现了协程 -&gt; 说法1：有多个入口的函数，说法2： 可以暂停的函数， 可以暂停的函数(可以向暂停的地方传入值)</li></ul><p>生成器的方法：</p><ul><li>next(gen)</li><li>gen.send()</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_func</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 1. 可以产出值， 2. 可以接收值(调用方传递进来的值)</span></span><br><span class="line">    html = <span class="keyword">yield</span> <span class="string">"http://projectsedu.com"</span></span><br><span class="line">    print(html)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"bobby"</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    gen = gen_func()</span><br><span class="line">    <span class="comment"># 在调用send发送非none值之前，我们必须启动一次生成器， 方式有两种1. gen.send(None), 2. next(gen)</span></span><br><span class="line">    url = gen.send(<span class="literal">None</span>)</span><br><span class="line">    <span class="comment"># download url</span></span><br><span class="line">    html = <span class="string">"bobby"</span></span><br><span class="line">    print(gen.send(html)) <span class="comment">#send方法可以传递值进入生成器内部，同时还可以重启生成器执行到下一个yield位置</span></span><br><span class="line">    print(gen.send(html))</span><br></pre></td></tr></table></figure><ul><li>gen.close()  关闭生成器(如果在yield处捕获异常，就会在close()处抛出异常)</li><li>gen.throw()  向生成器内传入异常</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_func</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">yield</span> <span class="string">"http://projectsedu.com"</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"bobby"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    gen = gen_func()</span><br><span class="line">    print(next(gen))</span><br><span class="line">    gen.throw(Exception, <span class="string">"download error"</span>)</span><br></pre></td></tr></table></figure><h4 id="yield-from"><a href="#yield-from" class="headerlink" title="yield from"></a>yield from</h4><p>yield from的一个例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">final_result = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sales_sum</span><span class="params">(pro_name)</span>:</span></span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    nums = []</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        x = <span class="keyword">yield</span></span><br><span class="line">        print(pro_name+<span class="string">"销量: "</span>, x)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> x:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        total += x</span><br><span class="line">        nums.append(x)</span><br><span class="line">    <span class="keyword">return</span> total, nums</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">middle</span><span class="params">(key)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        final_result[key] = <span class="keyword">yield</span> <span class="keyword">from</span> sales_sum(key)</span><br><span class="line">        print(key+<span class="string">"销量统计完成！！."</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    data_sets = &#123;</span><br><span class="line">        <span class="string">"bobby牌面膜"</span>: [<span class="number">1200</span>, <span class="number">1500</span>, <span class="number">3000</span>],</span><br><span class="line">        <span class="string">"bobby牌手机"</span>: [<span class="number">28</span>,<span class="number">55</span>,<span class="number">98</span>,<span class="number">108</span> ],</span><br><span class="line">        <span class="string">"bobby牌大衣"</span>: [<span class="number">280</span>,<span class="number">560</span>,<span class="number">778</span>,<span class="number">70</span>],</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> key, data_set <span class="keyword">in</span> data_sets.items():</span><br><span class="line">        print(<span class="string">"start key:"</span>, key)</span><br><span class="line">        m = middle(key)</span><br><span class="line">        m.send(<span class="literal">None</span>) <span class="comment"># 预激middle协程</span></span><br><span class="line">        <span class="keyword">for</span> value <span class="keyword">in</span> data_set:</span><br><span class="line">            m.send(value)   <span class="comment"># 给协程传递每一组的值</span></span><br><span class="line">        m.send(<span class="literal">None</span>)</span><br><span class="line">    print(<span class="string">"final_result:"</span>, final_result)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yield from的源码和解释</span></span><br><span class="line"><span class="comment">#pep380</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#1. RESULT = yield from EXPR可以简化成下面这样</span></span><br><span class="line"><span class="comment">#一些说明</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">_i：子生成器，同时也是一个迭代器</span></span><br><span class="line"><span class="string">_y：子生成器生产的值</span></span><br><span class="line"><span class="string">_r：yield from 表达式最终的值</span></span><br><span class="line"><span class="string">_s：调用方通过send()发送的值</span></span><br><span class="line"><span class="string">_e：异常对象</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">_i = iter(EXPR)      <span class="comment"># EXPR是一个可迭代对象，_i其实是子生成器；</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    _y = next(_i)   <span class="comment"># 预激子生成器，把产出的第一个值存在_y中；</span></span><br><span class="line"><span class="keyword">except</span> StopIteration <span class="keyword">as</span> _e:</span><br><span class="line">    _r = _e.value   <span class="comment"># 如果抛出了`StopIteration`异常，那么就将异常对象的`value`属性保存到_r，这是最简单的情况的返回值；</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:    <span class="comment"># 尝试执行这个循环，委托生成器会阻塞；</span></span><br><span class="line">        _s = <span class="keyword">yield</span> _y   <span class="comment"># 生产子生成器的值，等待调用方`send()`值，发送过来的值将保存在_s中；</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            _y = _i.send(_s)    <span class="comment"># 转发_s，并且尝试向下执行；</span></span><br><span class="line">        <span class="keyword">except</span> StopIteration <span class="keyword">as</span> _e:</span><br><span class="line">            _r = _e.value       <span class="comment"># 如果子生成器抛出异常，那么就获取异常对象的`value`属性存到_r，退出循环，恢复委托生成器的运行；</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">RESULT = _r     <span class="comment"># _r就是整个yield from表达式返回的值。</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">1. 子生成器可能只是一个迭代器，并不是一个作为协程的生成器，所以它不支持.throw()和.close()方法；</span></span><br><span class="line"><span class="string">2. 如果子生成器支持.throw()和.close()方法，但是在子生成器内部，这两个方法都会抛出异常；</span></span><br><span class="line"><span class="string">3. 调用方让子生成器自己抛出异常</span></span><br><span class="line"><span class="string">4. 当调用方使用next()或者.send(None)时，都要在子生成器上调用next()函数，当调用方使用.send()发送非 None 值时，才调用子生成器的.send()方法；</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">_i = iter(EXPR)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    _y = next(_i)</span><br><span class="line"><span class="keyword">except</span> StopIteration <span class="keyword">as</span> _e:</span><br><span class="line">    _r = _e.value</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            _s = <span class="keyword">yield</span> _y</span><br><span class="line">        <span class="keyword">except</span> GeneratorExit <span class="keyword">as</span> _e:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                _m = _i.close</span><br><span class="line">            <span class="keyword">except</span> AttributeError:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                _m()</span><br><span class="line">            <span class="keyword">raise</span> _e</span><br><span class="line">        <span class="keyword">except</span> BaseException <span class="keyword">as</span> _e:</span><br><span class="line">            _x = sys.exc_info()</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                _m = _i.throw</span><br><span class="line">            <span class="keyword">except</span> AttributeError:</span><br><span class="line">                <span class="keyword">raise</span> _e</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    _y = _m(*_x)</span><br><span class="line">                <span class="keyword">except</span> StopIteration <span class="keyword">as</span> _e:</span><br><span class="line">                    _r = _e.value</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">if</span> _s <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                    _y = next(_i)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    _y = _i.send(_s)</span><br><span class="line">            <span class="keyword">except</span> StopIteration <span class="keyword">as</span> _e:</span><br><span class="line">                _r = _e.value</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">RESULT = _r</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">看完代码，我们总结一下关键点：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1. 子生成器生产的值，都是直接传给调用方的；调用方通过.send()发送的值都是直接传递给子生成器的；如果发送的是 None，会调用子生成器的__next__()方法，如果不是 None，会调用子生成器的.send()方法；</span></span><br><span class="line"><span class="string">2. 子生成器退出的时候，最后的return EXPR，会触发一个StopIteration(EXPR)异常；</span></span><br><span class="line"><span class="string">3. yield from表达式的值，是子生成器终止时，传递给StopIteration异常的第一个参数；</span></span><br><span class="line"><span class="string">4. 如果调用的时候出现StopIteration异常，委托生成器会恢复运行，同时其他的异常会向上 "冒泡"；</span></span><br><span class="line"><span class="string">5. 传入委托生成器的异常里，除了GeneratorExit之外，其他的所有异常全部传递给子生成器的.throw()方法；如果调用.throw()的时候出现了StopIteration异常，那么就恢复委托生成器的运行，其他的异常全部向上 "冒泡"；</span></span><br><span class="line"><span class="string">6. 如果在委托生成器上调用.close()或传入GeneratorExit异常，会调用子生成器的.close()方法，没有的话就不调用。如果在调用.close()的时候抛出了异常，那么就向上 "冒泡"，否则的话委托生成器会抛出GeneratorExit异常。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p>chain函数</p><p>它接受一个可迭代对象列表作为输入，并返回一个迭代器，有效的屏蔽掉在多个容器中迭代细节。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">b = [<span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'z'</span>]</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> chain(a, b):</span><br><span class="line">print(x)</span><br><span class="line">  </span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line">x</span><br><span class="line">y</span><br><span class="line">z</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>偏函数partial</p><p>partial函数的作用就是：将所作用的函数作为partial()函数的第一个参数，原函数的各个参数依次作为partial()函数的后续参数，原函数有关键字参数的一定要带上关键字，没有的话，按原有参数顺序进行补充。</p><p>偏函数的第二个部分(可变参数)，按原有函数的参数顺序进行补充，参数将作用在原函数上，最后偏函数返回一个新函数（类似于，装饰器decorator，对于函数进行二次包装，产生特殊效果；但又不同于装饰器，偏函数产生了一个新函数，而装饰器，可改变被装饰函数的函数入口地址也可以不影响原函数）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(a,b,c=<span class="number">2</span>)</span>:</span></span><br><span class="line">    print(<span class="string">"a is:%s b is %s c is %s"</span>%(a,b,c))</span><br><span class="line">    <span class="keyword">return</span> a+b+c</span><br><span class="line">add_with_a_b=partial(add,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">print(add_with_a_b())<span class="comment"># it's 7</span></span><br><span class="line">add_with_a=partial(add,<span class="number">9</span>)</span><br><span class="line">print(add_with_a(<span class="number">10</span>))<span class="comment"># it's 21</span></span><br><span class="line"><span class="comment">#################</span></span><br><span class="line">a <span class="keyword">is</span>:<span class="number">2</span> b <span class="keyword">is</span> <span class="number">3</span> c <span class="keyword">is</span> <span class="number">2</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line">a <span class="keyword">is</span>:<span class="number">9</span> b <span class="keyword">is</span> <span class="number">10</span> c <span class="keyword">is</span> <span class="number">2</span></span><br><span class="line"><span class="number">21</span></span><br></pre></td></tr></table></figure><h1 id="第十三章-asyncio并发编程"><a href="#第十三章-asyncio并发编程" class="headerlink" title="第十三章 asyncio并发编程"></a>第十三章 asyncio并发编程</h1><h4 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h4><p>使用asyncio</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#事件循环+回调（驱动生成器）+epoll(IO多路复用)</span></span><br><span class="line"><span class="comment">#asyncio是python用于解决异步io编程的一整套解决方案</span></span><br><span class="line"><span class="comment">#tornado、gevent、twisted（scrapy， django channels）</span></span><br><span class="line"><span class="comment">#torando(实现web服务器)， django+flask(uwsgi, gunicorn+nginx)</span></span><br><span class="line"><span class="comment">#tornado可以直接部署， nginx+tornado</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get_html</span><span class="params">(url)</span>:</span></span><br><span class="line">    print(<span class="string">"start get url"</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">"end get url"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    tasks = [get_html(<span class="string">"http://www.imooc.com"</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line">    loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line">    print(time.time()-start_time)</span><br></pre></td></tr></table></figure><p>获取协程的返回值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get_html</span><span class="params">(url)</span>:</span></span><br><span class="line">    print(<span class="string">"start get url"</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"bobby"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">callback</span><span class="params">(url, future)</span>:</span></span><br><span class="line">    print(url)</span><br><span class="line">    print(<span class="string">"send email to bobby"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    <span class="comment"># get_future = asyncio.ensure_future(get_html("http://www.imooc.com"))</span></span><br><span class="line">    task = loop.create_task(get_html(<span class="string">"http://www.imooc.com"</span>))</span><br><span class="line">    task.add_done_callback(partial(callback, <span class="string">"http://www.imooc.com"</span>))</span><br><span class="line">    loop.run_until_complete(task)</span><br><span class="line">    print(task.result())</span><br></pre></td></tr></table></figure><p>注：</p><p>1、callback是一个回调函数，作用是做完耗时操作后想做某一件事，例如发送邮件，可以用这种方法进行操作，必须接受一个future对象作为参数，加入task.add_done_callback后默认会添加future对象</p><p>2、</p><p>get_future = asyncio.ensure_future(get_html(“<a href="http://www.imooc.com&quot;" target="_blank" rel="noopener">http://www.imooc.com&quot;</a>))</p><p>loop.run_until_complete(get_future)</p><p>与</p><p>task = loop.create_task(get_html(“<a href="http://www.imooc.com&quot;" target="_blank" rel="noopener">http://www.imooc.com&quot;</a>))</p><p>loop.run_until_complete(task)</p><p>作用相同，task是get_future的一个子类</p><p>wait 和 gather</p><p>asyncio.wait和asyncio.gather是等待一定条件（默认是所有任务执行完）满足后再继续执行下面的步骤</p><p>添加参数，也可以修改成第一个任务后就继续执行主线程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get_html</span><span class="params">(url)</span>:</span></span><br><span class="line">    print(<span class="string">"start get url"</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">"end get url"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    tasks = [get_html(<span class="string">"http://www.imooc.com"</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line">    <span class="comment"># loop.run_until_complete(asyncio.wait(tasks))</span></span><br><span class="line">    <span class="comment"># loop.run_until_complete(asyncio.gather(*tasks))</span></span><br><span class="line">    <span class="comment"># print(time.time()-start_time)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#gather和wait的区别</span></span><br><span class="line">    <span class="comment">#gather更加high-level</span></span><br><span class="line">    <span class="comment"># gather可以进行分组</span></span><br><span class="line">    group1 = [get_html(<span class="string">"http://projectsedu.com"</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>)]</span><br><span class="line">    group2 = [get_html(<span class="string">"http://www.imooc.com"</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>)]</span><br><span class="line">    group1 = asyncio.gather(*group1)</span><br><span class="line">    group2 = asyncio.gather(*group2)</span><br><span class="line">    group2.cancel() <span class="comment"># 对未执行的分组进行取消</span></span><br><span class="line">    loop.run_until_complete(asyncio.gather(group1, group2))</span><br><span class="line">    print(time.time() - start_time)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第二章-一切皆对象&quot;&gt;&lt;a href=&quot;#第二章-一切皆对象&quot; class=&quot;headerlink&quot; title=&quot;第二章 一切皆对象&quot;&gt;&lt;/a&gt;第二章 一切皆对象&lt;/h1&gt;&lt;h4 id=&quot;函数和类也是对象，属于python的一等公民&quot;&gt;&lt;a href=&quot;#函数和
      
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="IO" scheme="http://yoursite.com/tags/IO/"/>
    
  </entry>
  
  <entry>
    <title>numpy和pandas</title>
    <link href="http://yoursite.com/2020/05/16/python/numpy%E5%92%8Cpandas/"/>
    <id>http://yoursite.com/2020/05/16/python/numpy%E5%92%8Cpandas/</id>
    <published>2020-05-16T01:05:57.000Z</published>
    <updated>2020-05-16T02:09:17.035Z</updated>
    
    <content type="html"><![CDATA[<h1 id="numpy"><a href="#numpy" class="headerlink" title="numpy"></a>numpy</h1><h4 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line">np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看数组的类型</span></span><br><span class="line">type(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看数据的类型</span></span><br><span class="line">a.dtype</span><br></pre></td></tr></table></figure><h4 id="指定创建数组的数据类型"><a href="#指定创建数组的数据类型" class="headerlink" title="指定创建数组的数据类型"></a>指定创建数组的数据类型</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>], dtype=np.bool)  <span class="comment"># 或者使用dtype='?'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改数组的数据类型</span></span><br><span class="line">a.astype(<span class="string">"i1"</span>) <span class="comment"># 或者使用a.astype(np.int8)</span></span><br></pre></td></tr></table></figure><h4 id="修改浮点型的小数位数"><a href="#修改浮点型的小数位数" class="headerlink" title="修改浮点型的小数位数"></a>修改浮点型的小数位数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.round(b, <span class="number">2</span>)  <span class="comment"># b是浮点型数组</span></span><br></pre></td></tr></table></figure><h4 id="数组的形状"><a href="#数组的形状" class="headerlink" title="数组的形状"></a>数组的形状</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看数组的形状,得到的结果是一个元组</span></span><br><span class="line">a.shape</span><br><span class="line"><span class="comment"># 获取数组的行数</span></span><br><span class="line">a.shape[<span class="number">0</span>]</span><br><span class="line"><span class="comment"># 获取数组的列数</span></span><br><span class="line">a.shape[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改数组的形状</span></span><br><span class="line">b = a.reshape(<span class="number">2</span>, <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把数组转化为一维数组</span></span><br><span class="line">a.flatten()</span><br></pre></td></tr></table></figure><h4 id="数组和数组的计算"><a href="#数组和数组的计算" class="headerlink" title="数组和数组的计算"></a>数组和数组的计算</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 广播机制</span></span><br><span class="line">a + <span class="number">1</span></span><br><span class="line">a * <span class="number">3</span></span><br></pre></td></tr></table></figure><p>如果两个数组的后缘维度（即从末尾开始算起的维度）的轴长度相符或其中一方的长度为1，则认为它们是广播兼容的。广播会在缺失和（或）长度为1的维度上进行。</p><p>可以把维度指的是shape所对应的数字。</p><p>也就是说两个数组shape得到的元组的后2位要相同，或者后2位中一个相同，另外一个数字有一个数组为1</p><h4 id="numpy读取数据"><a href="#numpy读取数据" class="headerlink" title="numpy读取数据"></a>numpy读取数据</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">np.loadtxt(fname,dtype=np.float,delimiter=<span class="literal">None</span>,skiprows=<span class="number">0</span>,usecols=<span class="literal">None</span>,unpack=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># 例如：</span></span><br><span class="line">np.loadtxt(US_video_data_numbers_path, delimiter=<span class="string">","</span>, dtype=int,unpack=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td>frame</td><td>文件、字符串或产生器，可以是.gz或bz2压缩文件</td></tr><tr><td>dtype</td><td>数据类型，可选，csv的字符串以什么数据类型读入数组中，默认np.float</td></tr><tr><td>delimiter</td><td>分割字符串，默认是任何空格，改为逗号</td></tr><tr><td>skiprows</td><td>跳过前X行，一般跳过第一行表头</td></tr><tr><td>usecols</td><td>读取指定的列，索引，元组类型</td></tr><tr><td>unpack</td><td>如果True，读入属性将分别写入不同数组变量，False读入数据只写入一个数组变量，默认False。相当于转置的效果</td></tr></tbody></table><h4 id="numpy中的转置"><a href="#numpy中的转置" class="headerlink" title="numpy中的转置"></a>numpy中的转置</h4><p>转置是一种变换，对于numpy中的数组来说，就是在对角线方向交换数据，目的也是为了更方便的去处理数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 转置的3种方法</span></span><br><span class="line">t.transpose()</span><br><span class="line">t.swapaxes(<span class="number">1</span>,<span class="number">0</span>)</span><br><span class="line">t.T</span><br></pre></td></tr></table></figure><h4 id="numpy的索引和切片"><a href="#numpy的索引和切片" class="headerlink" title="numpy的索引和切片"></a>numpy的索引和切片</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a[<span class="number">1</span>]  <span class="comment"># 取第2行</span></span><br><span class="line">a[<span class="number">1</span>:<span class="number">3</span>]  <span class="comment"># 取第2到第3行</span></span><br><span class="line">a[:, <span class="number">2</span>]  <span class="comment"># 取第3列</span></span><br><span class="line">a[:, <span class="number">2</span>:<span class="number">4</span>]  <span class="comment"># 取第3到第4列</span></span><br><span class="line">a[[<span class="number">1</span>,<span class="number">3</span>], :]  <span class="comment"># 分别取第2行和第3行</span></span><br><span class="line">a[:[<span class="number">2</span>,<span class="number">4</span>]]  <span class="comment"># 分别取第3列和第4列</span></span><br><span class="line">a[[<span class="number">1</span>:<span class="number">3</span>],[<span class="number">2</span>,<span class="number">4</span>]]  <span class="comment"># 取第2行第3行和第3列第4列的交集</span></span><br><span class="line">a[:,<span class="number">2</span>:<span class="number">8</span>:<span class="number">2</span>]  <span class="comment"># 取第3列到第8列，步长为2</span></span><br><span class="line">a[:,<span class="number">2</span>:<span class="number">4</span>] = <span class="number">0</span>  <span class="comment"># 把第3列到第4列的值设置为0</span></span><br></pre></td></tr></table></figure><h4 id="numpy中布尔索引"><a href="#numpy中布尔索引" class="headerlink" title="numpy中布尔索引"></a>numpy中布尔索引</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">t = np.arange(<span class="number">24</span>).reshape(<span class="number">4</span>,<span class="number">6</span>)</span><br><span class="line">print(t &lt; <span class="number">10</span>)</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">array([[ <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>],</span><br><span class="line">       [ <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">False</span>],</span><br><span class="line">       [<span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span>],</span><br><span class="line">       [<span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span>]])</span><br><span class="line"><span class="comment"># 以上是t&lt;10的输出结果</span></span><br><span class="line"></span><br><span class="line">t[t&lt;<span class="number">10</span>]=<span class="number">0</span></span><br><span class="line">print(t)</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[[ <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>]</span><br><span class="line"> [ <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span> <span class="number">10</span> <span class="number">11</span>]</span><br><span class="line"> [<span class="number">12</span> <span class="number">13</span> <span class="number">14</span> <span class="number">15</span> <span class="number">16</span> <span class="number">17</span>]</span><br><span class="line"> [<span class="number">18</span> <span class="number">19</span> <span class="number">20</span> <span class="number">21</span> <span class="number">22</span> <span class="number">23</span>]]</span><br></pre></td></tr></table></figure><h4 id="numpy中的三元运算符"><a href="#numpy中的三元运算符" class="headerlink" title="numpy中的三元运算符"></a>numpy中的三元运算符</h4><p>把t中小于10的数字替换为0，把大于10的替换为10</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">t = np.where(t&lt;<span class="number">10</span>,<span class="number">0</span>,<span class="number">10</span>)</span><br><span class="line">print(t)</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[[ <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>]</span><br><span class="line"> [ <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span> <span class="number">10</span> <span class="number">10</span>]</span><br><span class="line"> [<span class="number">10</span> <span class="number">10</span> <span class="number">10</span> <span class="number">10</span> <span class="number">10</span> <span class="number">10</span>]</span><br><span class="line"> [<span class="number">10</span> <span class="number">10</span> <span class="number">10</span> <span class="number">10</span> <span class="number">10</span> <span class="number">10</span>]]</span><br></pre></td></tr></table></figure><h4 id="numpy中的clip（裁剪）"><a href="#numpy中的clip（裁剪）" class="headerlink" title="numpy中的clip（裁剪）"></a>numpy中的clip（裁剪）</h4><p>把t中小于10的数字替换为10，大于20的数字替换为20，其他数字不变</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">t = t.clip(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">print(t)</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[[<span class="number">10</span> <span class="number">10</span> <span class="number">10</span> <span class="number">10</span> <span class="number">10</span> <span class="number">10</span>]</span><br><span class="line"> [<span class="number">10</span> <span class="number">10</span> <span class="number">10</span> <span class="number">10</span> <span class="number">10</span> <span class="number">11</span>]</span><br><span class="line"> [<span class="number">12</span> <span class="number">13</span> <span class="number">14</span> <span class="number">15</span> <span class="number">16</span> <span class="number">17</span>]</span><br><span class="line"> [<span class="number">18</span> <span class="number">19</span> <span class="number">20</span> <span class="number">20</span> <span class="number">20</span> <span class="number">20</span>]]</span><br></pre></td></tr></table></figure><h4 id="numpy中的nan和inf"><a href="#numpy中的nan和inf" class="headerlink" title="numpy中的nan和inf"></a>numpy中的nan和inf</h4><p>nan(NAN,Nan):not a number表示不是一个数字</p><h5 id="什么时候会出现numpy中的nan："><a href="#什么时候会出现numpy中的nan：" class="headerlink" title="什么时候会出现numpy中的nan："></a>什么时候会出现numpy中的nan：</h5><ul><li>当我们读取本地的文件为float的时候，如果有缺失，就会出现nan</li><li>当做了一个不合适的计算的时候（比如无穷大（inf）减去无穷大）</li></ul><p>inf(-inf,inf):infinity，inf表示正无穷，-inf表示负无穷</p><p>#####什么时候会出现inf(-inf,inf):</p><ul><li>比如一个数字除以0，（python中直接回报错，numpy中是一个inf或者-inf）</li></ul><p>#####inf和nan的type类型都是float</p><p>#####nan中的注意点：</p><ul><li>两个nan是不相等的，即np.nan != np.nan</li><li>可以利用以上的特性，判断数组中nan的个数<ul><li>np.count_nonzero(t != t)</li></ul></li><li>如果判断一个数字是否为nan呢？通过np.isnan(a)来判断，返回bool类型，比较把nan替换为0<ul><li>t[np.isnan(t)] = 0</li></ul></li><li>nan和任何值计算都为nan</li></ul><h4 id="numpy中常用统计函数"><a href="#numpy中常用统计函数" class="headerlink" title="numpy中常用统计函数"></a>numpy中常用统计函数</h4><ul><li>求和：t.sum(axis=None)</li><li>均值：t.mean(a,axis=None) 受离群点的影响较大</li><li>中值：np.median(t,axis=None)</li><li>最大值：t.max(axis=None)</li><li>最小值：t.min(axis=None)</li><li>极值：np.ptp(t,axis=None) 即最大值和最小值只差</li><li>标准差： t.std(axis=None)</li></ul><p>默认返回多维数组的全部的统计结果，如果指定axis则返回一个当前轴上的结果</p><p>标准差：是一组数据平均值分散程度的一种度量。一个较大的标准差，代表大部分数值和其平均值之间差异较大；一个较小的标准差，代表这些数值较接近平均值反映出数据的波动稳定情况，越大表示波动越大，越不稳定。</p><h4 id="ndarry缺失值填充均值"><a href="#ndarry缺失值填充均值" class="headerlink" title="ndarry缺失值填充均值"></a>ndarry缺失值填充均值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">t = np.array([[  <span class="number">0.</span>,   <span class="number">1.</span>,   <span class="number">2.</span>,   <span class="number">3.</span>,   <span class="number">4.</span>,   <span class="number">5.</span>],</span><br><span class="line">       [  <span class="number">6.</span>,   <span class="number">7.</span>,  np.nan,   <span class="number">9.</span>,  <span class="number">10.</span>,  <span class="number">11.</span>],</span><br><span class="line">       [ <span class="number">12.</span>,  <span class="number">13.</span>,  <span class="number">14.</span>,  np.nan,  <span class="number">16.</span>,  <span class="number">17.</span>],</span><br><span class="line">       [ <span class="number">18.</span>,  <span class="number">19.</span>,  <span class="number">20.</span>,  <span class="number">21.</span>,  <span class="number">22.</span>,  <span class="number">23.</span>]])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fill_nan_by_column_mean</span><span class="params">(t)</span>:</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> range(t.shape[<span class="number">1</span>]):</span><br><span class="line">    nan_num = np.count_nonzero(t[:, i][t[:, i] != t[:, i]])  <span class="comment"># 计算非nan的个数</span></span><br><span class="line">    <span class="keyword">if</span> nan_num &gt; <span class="number">0</span>:  <span class="comment"># 存在的nan值</span></span><br><span class="line">      now_col = t[:, i]</span><br><span class="line">      now_col_not_nan = now_col[np.isnan(now_col) == <span class="literal">False</span>].sum()  <span class="comment"># 求和</span></span><br><span class="line">      now_col_mean = now_col_not_nan / (t.shape[<span class="number">0</span>] - nan_num)  <span class="comment"># 和/个数</span></span><br><span class="line">      now_col[np.isnan(now_col)] = now_col_mean  <span class="comment"># 赋值给now_col</span></span><br><span class="line">      t[:, i] = now_col  <span class="comment"># 赋值给t，即更新t的当前列</span></span><br><span class="line">    </span><br><span class="line">fill_nan_by_column_mean(t)</span><br><span class="line">print(t)</span><br></pre></td></tr></table></figure><h4 id="数组的拼接"><a href="#数组的拼接" class="headerlink" title="数组的拼接"></a>数组的拼接</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">np.vstack((t1,t2))  <span class="comment"># 竖直拼接</span></span><br><span class="line">np.hstack((t1,t2))  <span class="comment"># 水平拼接</span></span><br></pre></td></tr></table></figure><h4 id="数组的行列交换"><a href="#数组的行列交换" class="headerlink" title="数组的行列交换"></a>数组的行列交换</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t[[<span class="number">1</span>,<span class="number">2</span>],:] = t[[<span class="number">2</span>,<span class="number">1</span>],:]  <span class="comment"># 行交换</span></span><br><span class="line">t[:,[<span class="number">0</span>,<span class="number">2</span>]] = t[:,[<span class="number">2</span>,<span class="number">0</span>]]  <span class="comment"># 列交换</span></span><br></pre></td></tr></table></figure><h4 id="numpy更多好用的方法"><a href="#numpy更多好用的方法" class="headerlink" title="numpy更多好用的方法"></a>numpy更多好用的方法</h4><ol><li>获取最大值最小值的位置<ol><li>np.argmax(t,axis=0)</li><li>np.argmin(t,axis=1)</li></ol></li><li>创建一个全0的数组：np.zeros((3,4))</li><li>创建一个全1的数组：np.ones((3,4))</li><li>创建一个对角线为1的正方形数组（方阵）：np,eye(3)</li></ol><h4 id="生成随机数"><a href="#生成随机数" class="headerlink" title="生成随机数"></a>生成随机数</h4><p><img src="/2020/05/16/python/numpy%E5%92%8Cpandas/numpy%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0.png" alt></p><h4 id="numpy的注意点copy和view"><a href="#numpy的注意点copy和view" class="headerlink" title="numpy的注意点copy和view"></a>numpy的注意点copy和view</h4><ol><li>a=b完全不复制，a和b相互影响</li><li>a=b[:]，视图的操作，一种切片，会创建新的对象a，但是a的数据完全由b保管，他们两个的数据变化是一致的。</li><li>a=b.copy()，复制，a和b互不影响。</li></ol><h1 id="pandas"><a href="#pandas" class="headerlink" title="pandas"></a>pandas</h1><p>numpy能够帮助我们处理数值，但是pandas除了处理数值之外（基于numpy），还能够帮助我们处理其他类型的数据</p><h4 id="pandas之Series创建"><a href="#pandas之Series创建" class="headerlink" title="pandas之Series创建"></a>pandas之Series创建</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法一</span></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">t = pd.Series(np.arange(<span class="number">10</span>), index=list(string.ascii_uppercase[:<span class="number">10</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二</span></span><br><span class="line">a = &#123;string.ascii_uppercase[i]:i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)&#125;</span><br><span class="line">pd.Series(a)</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">A    <span class="number">0</span></span><br><span class="line">B    <span class="number">1</span></span><br><span class="line">C    <span class="number">2</span></span><br><span class="line">D    <span class="number">3</span></span><br><span class="line">E    <span class="number">4</span></span><br><span class="line">F    <span class="number">5</span></span><br><span class="line">G    <span class="number">6</span></span><br><span class="line">H    <span class="number">7</span></span><br><span class="line">I    <span class="number">8</span></span><br><span class="line">J    <span class="number">9</span></span><br><span class="line">dtype: int64</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 重新指定索引</span></span><br><span class="line">pd.Series(a, index=list(string.ascii_uppercase[<span class="number">5</span>:<span class="number">15</span>]))</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">F    <span class="number">5.0</span></span><br><span class="line">G    <span class="number">6.0</span></span><br><span class="line">H    <span class="number">7.0</span></span><br><span class="line">I    <span class="number">8.0</span></span><br><span class="line">J    <span class="number">9.0</span></span><br><span class="line">K    NaN</span><br><span class="line">L    NaN</span><br><span class="line">M    NaN</span><br><span class="line">N    NaN</span><br><span class="line">O    NaN</span><br><span class="line">dtype: float64</span><br><span class="line"><span class="comment"># 重新给其指定其他的索引之后，如果能够对应上，就取其值，如果不能，就为Nan</span></span><br><span class="line"><span class="comment"># 为什么类型为float呢？</span></span><br><span class="line">numpy中nan为float，pandas会自动根据数据类更改series的dtype类型</span><br><span class="line">pandas修改dtype和numpy的方法一样</span><br></pre></td></tr></table></figure><h4 id="pandas之Series切片和索引"><a href="#pandas之Series切片和索引" class="headerlink" title="pandas之Series切片和索引"></a>pandas之Series切片和索引</h4><p>切片：直接传入start end或者步长即可</p><p>索引：一个的时候直接传入序号或者index，多个的时候传入序号或者index的列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">t = pd.Series(np.arange(<span class="number">10</span>), index=list(<span class="string">"ABCDEFGHIJ"</span>))</span><br><span class="line">  </span><br><span class="line">t[<span class="number">2</span>:<span class="number">10</span>:<span class="number">2</span>]  <span class="comment"># 切片 步长为2</span></span><br><span class="line">t[<span class="number">1</span>]  <span class="comment"># 取索引</span></span><br><span class="line">t[[<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>]]  <span class="comment"># 取索引，索引分别为2，3，6</span></span><br><span class="line">t[t&gt;<span class="number">4</span>]  <span class="comment"># 值大于4的所有数据</span></span><br><span class="line">t[<span class="string">"F"</span>]  <span class="comment"># 索引为F的数据</span></span><br><span class="line">t[[<span class="string">"A"</span>, <span class="string">"F"</span>, <span class="string">"g"</span>]]  <span class="comment"># 索引为A，F，g的数据，因为索引g没有，所以取出的值为NaN</span></span><br></pre></td></tr></table></figure><h4 id="pandas之Series的索引和值"><a href="#pandas之Series的索引和值" class="headerlink" title="pandas之Series的索引和值"></a>pandas之Series的索引和值</h4><p>Series对象本质上由两个数组构成，一个数组构成对象的键（index, 索引），一个数组构成对象的值（values），键-&gt;值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">t.index</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">Index([<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>, <span class="string">'G'</span>, <span class="string">'H'</span>, <span class="string">'I'</span>, <span class="string">'J'</span>], dtype=<span class="string">'object'</span>)</span><br><span class="line"></span><br><span class="line">t.values</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line"></span><br><span class="line">type(t.index)</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">pandas.core.indexes.base.Index</span><br><span class="line"></span><br><span class="line">type(t.values)</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">numpy.ndarray</span><br></pre></td></tr></table></figure><p>ndarray的很多方法都可以运用于series类型，比如argmax，clip</p><p>series具有where方法，但是结果和ndarray不同</p><h4 id="Series的tolist-方法和unique-方法"><a href="#Series的tolist-方法和unique-方法" class="headerlink" title="Series的tolist()方法和unique()方法"></a>Series的tolist()方法和unique()方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">df = pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>])</span><br><span class="line">df.tolist()</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">df = pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>])</span><br><span class="line">df.unique()</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure><h4 id="pandas之读取外部数据"><a href="#pandas之读取外部数据" class="headerlink" title="pandas之读取外部数据"></a>pandas之读取外部数据</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pd.read_csv</span><br><span class="line">pd.read_sql(sql_sentence, connection)</span><br></pre></td></tr></table></figure><h4 id="pandas之DataFrame的创建"><a href="#pandas之DataFrame的创建" class="headerlink" title="pandas之DataFrame的创建"></a>pandas之DataFrame的创建</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法一</span></span><br><span class="line">t = pd.DataFrame(np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>,<span class="number">4</span>),index=list(<span class="string">"ABC"</span>),columns=list(<span class="string">"WXYZ"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二</span></span><br><span class="line">t_dict = &#123;</span><br><span class="line">  <span class="string">"name"</span>:[<span class="string">"zhangsan"</span>, <span class="string">"lisi"</span>], </span><br><span class="line">  <span class="string">"age"</span>:[<span class="string">"12"</span>, <span class="string">"20"</span>], </span><br><span class="line">&#125;</span><br><span class="line">pd.DataFrame(t_dict)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法三</span></span><br><span class="line">t_dict = [</span><br><span class="line">  &#123;<span class="string">"name"</span>: <span class="string">"zhangsan"</span>, <span class="string">"age"</span>: <span class="number">12</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"name"</span>: <span class="string">"lisi"</span>, <span class="string">"age"</span>: <span class="number">20</span>&#125;,</span><br><span class="line">]</span><br><span class="line">pd.DataFrame(t_dict)</span><br></pre></td></tr></table></figure><h4 id="DataFrame的基础属性和整体情况查询"><a href="#DataFrame的基础属性和整体情况查询" class="headerlink" title="DataFrame的基础属性和整体情况查询"></a>DataFrame的基础属性和整体情况查询</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基础属性</span></span><br><span class="line">df.shape  <span class="comment"># 行数 列数</span></span><br><span class="line">df.dtypes  <span class="comment"># 列数据类型</span></span><br><span class="line">df.ndim  <span class="comment"># 数据维度</span></span><br><span class="line">df.index  <span class="comment"># 行索引</span></span><br><span class="line">df.colums  <span class="comment"># 列索引</span></span><br><span class="line">df.values  <span class="comment"># 对象值，二维ndarray数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 整体情况查询</span></span><br><span class="line">df.head(<span class="number">3</span>)  <span class="comment"># 显示头部几行，默认5行</span></span><br><span class="line">de.tail(<span class="number">3</span>)  <span class="comment"># 显示尾部几行，默认5行</span></span><br><span class="line">df.info()  <span class="comment"># 相关信息概览：行数，列数，列索引，列非空值个数，列类型，内存占用</span></span><br><span class="line">df.describe()  <span class="comment"># 快速综合统计结果：计数，均值，标准差，最大值，四分位数，最小值</span></span><br></pre></td></tr></table></figure><h4 id="对某一列进行排序"><a href="#对某一列进行排序" class="headerlink" title="对某一列进行排序"></a>对某一列进行排序</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对Count_AnimalName列进行排序，ascending=False表示从大到小排序</span></span><br><span class="line">df.sort_values(by=<span class="string">"Count_AnimalName"</span>, ascending=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h4 id="DataFrame之取行或者列"><a href="#DataFrame之取行或者列" class="headerlink" title="DataFrame之取行或者列"></a>DataFrame之取行或者列</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(np.arange(<span class="number">56</span>).reshape(<span class="number">7</span>,<span class="number">8</span>), index=list(<span class="string">"ABCDEFG"</span>), columns=list(<span class="string">"STUVWXYZ"</span>))</span><br><span class="line"><span class="comment"># 取第X列</span></span><br><span class="line">df[<span class="string">"X"</span>]</span><br><span class="line"><span class="comment"># 取第X、Z列</span></span><br><span class="line">df[[<span class="string">"X"</span>, <span class="string">"Z"</span>]]</span><br><span class="line"><span class="comment"># 取第3到第6行</span></span><br><span class="line">df[<span class="number">2</span>:<span class="number">6</span>]</span><br><span class="line"><span class="comment"># 取第3到第6行和第X列</span></span><br><span class="line">df[<span class="number">2</span>:<span class="number">6</span>][<span class="string">"X"</span>]</span><br></pre></td></tr></table></figure><h4 id="DataFrame之loc和iloc"><a href="#DataFrame之loc和iloc" class="headerlink" title="DataFrame之loc和iloc"></a>DataFrame之loc和iloc</h4><ul><li>df.loc 通过标签索引行数据</li><li>Df.iloc 通过位置获取行数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 取A行，W列交集的数据</span></span><br><span class="line">df.loc[<span class="string">"A"</span>, <span class="string">"W"</span>]</span><br><span class="line"><span class="comment"># 取A行和W、Z交集的数据</span></span><br><span class="line">df.loc[<span class="string">"A"</span>, [<span class="string">"W"</span>, <span class="string">"Z"</span>]]</span><br><span class="line"><span class="comment"># 取A、C行和W、Z交集的数据</span></span><br><span class="line">df.loc[[<span class="string">"A"</span>, <span class="string">"c"</span>], [<span class="string">"W"</span>, <span class="string">"Z"</span>]]</span><br><span class="line"><span class="comment"># 取A行及A行之后所有行和W、Z的交集</span></span><br><span class="line">df.loc[<span class="string">"A"</span>: [<span class="string">"W"</span>, <span class="string">"Z"</span>]]</span><br><span class="line"><span class="comment"># 取A行到C行和W、Z的交集</span></span><br><span class="line">df.loc[<span class="string">"A"</span>:<span class="string">"C"</span>,[<span class="string">"W"</span>,<span class="string">"Z"</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取第2行到第3行和第3列、第4列的交集</span></span><br><span class="line">df.iloc[<span class="number">1</span>:<span class="number">3</span>, [<span class="number">2</span>,<span class="number">3</span>]]</span><br><span class="line"><span class="comment"># 取第2行到第3行和第2列到第3列的交集</span></span><br><span class="line">df.iloc[<span class="number">1</span>:<span class="number">3</span>,<span class="number">1</span>:<span class="number">3</span>]</span><br></pre></td></tr></table></figure><p>赋值更改数据的过程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df.loc[<span class="string">"A"</span>, <span class="string">"Y"</span>] = <span class="number">100</span></span><br><span class="line">df.iloc[<span class="number">1</span>:<span class="number">2</span>,<span class="number">0</span>:<span class="number">2</span>] = <span class="number">200</span></span><br></pre></td></tr></table></figure><h4 id="DataFrame之布尔索引"><a href="#DataFrame之布尔索引" class="headerlink" title="DataFrame之布尔索引"></a>DataFrame之布尔索引</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 找到使用次数超过800的狗的名字</span></span><br><span class="line">df[df[<span class="string">"Count_AnimalName"</span>]&gt;<span class="number">800</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找到所有使用次数超过700并且名字的字符串的长度大于4的狗的名字</span></span><br><span class="line">df[(df[<span class="string">"Row_Labels"</span>].str.len()&gt;<span class="number">4</span>)&amp;(df[<span class="string">"Count_AnimalName"</span>]&gt;<span class="number">700</span>)]</span><br><span class="line"><span class="comment"># &amp;符号表示：且</span></span><br><span class="line"><span class="comment"># |符号表示：或</span></span><br></pre></td></tr></table></figure><h4 id="pandas之字符串方法"><a href="#pandas之字符串方法" class="headerlink" title="pandas之字符串方法"></a>pandas之字符串方法</h4><p><img src="/2020/05/16/python/numpy%E5%92%8Cpandas/pandas%E4%B9%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%96%B9%E6%B3%95.png" alt></p><h4 id="缺失数据的处理"><a href="#缺失数据的处理" class="headerlink" title="缺失数据的处理"></a>缺失数据的处理</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 判断数据是否为NaN</span></span><br><span class="line">pd.isnull(df)  <span class="comment"># 是NaN</span></span><br><span class="line">pd.notnull(df)  <span class="comment"># 不是NaN</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理方式1：删除NaN所在的行列</span></span><br><span class="line">t.dropna(axis=<span class="number">0</span>,how=<span class="string">'any'</span>,inplace=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># 填充数据</span></span><br><span class="line">t.fillna(t.mean())</span><br><span class="line">t.fillna(t.median())</span><br><span class="line">t.fillna(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>处理为0的数据：t[t==0]=np.nan</p><p>当然并不是每次为0的数据都需要处理</p><p>计算平均值等情况，nan是不参与计算的，但是0会</p><h4 id="pandas常用统计方法"><a href="#pandas常用统计方法" class="headerlink" title="pandas常用统计方法"></a>pandas常用统计方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 评分的平均分</span></span><br><span class="line">rating_mean = df[<span class="string">"Rating"</span>].mean()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导演的人数</span></span><br><span class="line">temp_list = df[<span class="string">"Actors"</span>].str.split(<span class="string">","</span>).tolist()</span><br><span class="line">nums = set([i <span class="keyword">for</span> j <span class="keyword">in</span> temp_list <span class="keyword">for</span> i <span class="keyword">in</span> j])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 电影市场的最大最小值</span></span><br><span class="line">max_runtime = df[<span class="string">"Runtime(Minutes)"</span>].max()</span><br><span class="line">max_runtime_index = df[<span class="string">"Runtime(Minutes)"</span>].argmax()</span><br><span class="line">min_runtime = df[<span class="string">"Runtime(Minutes)"</span>].min()</span><br><span class="line">min_runtime_index = df[<span class="string">"Runtime(Minutes)"</span>].argmin()</span><br><span class="line">runtime_median = df[<span class="string">"Runtime(Minutes)"</span>].median()</span><br></pre></td></tr></table></figure><h4 id="数据合并之join、merge"><a href="#数据合并之join、merge" class="headerlink" title="数据合并之join、merge"></a>数据合并之join、merge</h4><p>join：默认情况下他是把行索引相同的数据合并到一起</p><p><img src="/2020/05/16/python/numpy%E5%92%8Cpandas/join.png" alt></p><p>merge:按照指定的列把数据按照一定的方式合并到一起</p><p><img src="/2020/05/16/python/numpy%E5%92%8Cpandas/merge.png" alt></p><p>默认的合并方式inner：并集</p><p>outer：交集，NaN补全</p><p>left：左边为准，NaN补全</p><p>right：右边为准，NaN补全</p><h4 id="分组和聚合"><a href="#分组和聚合" class="headerlink" title="分组和聚合"></a>分组和聚合</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grouped = df.groupby(by=<span class="string">"columns_name"</span>)</span><br></pre></td></tr></table></figure><p>grouped是一个DataFrameGroupBy对象，是可迭代的。<br>grouped中的每一个元素是一个元组<br>元组里面是（索引(分组的值)，分组之后的DataFrame）</p><p>如果我们需要对国家和省份进行分组统计，应该怎么操作呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grouped = df.groupby(by=[df[<span class="string">"Country"</span>],df[<span class="string">"State/Province"</span>]])</span><br></pre></td></tr></table></figure><p>很多时候我们只希望对获取分组之后的某一部分数据，或者说我们只希望对某几列数据进行分组，这个时候我们应该怎么办呢？</p><p>获取分组之后的某一部分数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.groupby(by=[<span class="string">"Country"</span>,<span class="string">"State/Province"</span>])[<span class="string">"Country"</span>].count()</span><br></pre></td></tr></table></figure><p>对某几列数据进行分组：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">"Country"</span>].groupby(by=[df[<span class="string">"Country"</span>],df[<span class="string">"State/Province"</span>]]).count()</span><br></pre></td></tr></table></figure><p>观察结果，由于只选择了一列数据，所以结果是一个Series类型，如果我想返回一个DataFrame类型呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t1 = df[[<span class="string">"Country"</span>]].groupby(by=[df[<span class="string">"Country"</span>],df[<span class="string">"State/Province"</span>]]).count()</span><br><span class="line">t2 = df.groupby(by=[<span class="string">"Country"</span>,<span class="string">"State/Province"</span>])[[<span class="string">"Country"</span>]].count()</span><br></pre></td></tr></table></figure><p>以上的两条命令结果一样<br>和之前的结果的区别在于当前返回的是一个DataFrame类型</p><h4 id="索引和复合索引"><a href="#索引和复合索引" class="headerlink" title="索引和复合索引"></a>索引和复合索引</h4><p>简单的索引操作：</p><ul><li>获取index：df.index</li><li>指定index ：df.index = [‘x’,’y’]</li><li>重新设置index : df.reindex(list(“abcedf”))</li><li>指定某一列作为index ：df.set_index(“Country”,drop=False)</li><li>返回index的唯一值：df.set_index(“Country”).index.unique()</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">a = pd.DataFrame(&#123;<span class="string">'a'</span>: range(<span class="number">7</span>),<span class="string">'b'</span>: range(<span class="number">7</span>, <span class="number">0</span>, <span class="number">-1</span>),<span class="string">'c'</span>: [<span class="string">'one'</span>,<span class="string">'one'</span>,<span class="string">'one'</span>,<span class="string">'two'</span>,<span class="string">'two'</span>,<span class="string">'two'</span>, <span class="string">'two'</span>],<span class="string">'d'</span>: list(<span class="string">"hjklmno"</span>)&#125;)</span><br><span class="line">a</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">abcd</span><br><span class="line"><span class="number">0</span><span class="number">0</span><span class="number">7</span>oneh</span><br><span class="line"><span class="number">1</span><span class="number">1</span><span class="number">6</span>onej</span><br><span class="line"><span class="number">2</span><span class="number">2</span><span class="number">5</span>onek</span><br><span class="line"><span class="number">3</span><span class="number">3</span><span class="number">4</span>twol</span><br><span class="line"><span class="number">4</span><span class="number">4</span><span class="number">3</span>twom</span><br><span class="line"><span class="number">5</span><span class="number">5</span><span class="number">2</span>twon</span><br><span class="line"><span class="number">6</span><span class="number">6</span><span class="number">1</span>twoo</span><br><span class="line"></span><br><span class="line">x = a.set_index([<span class="string">"c"</span>,<span class="string">"d"</span>])[<span class="string">"a"</span>]</span><br><span class="line">x</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">c    d</span><br><span class="line">one  h    <span class="number">0</span></span><br><span class="line">     j    <span class="number">1</span></span><br><span class="line">     k    <span class="number">2</span></span><br><span class="line">two  l    <span class="number">3</span></span><br><span class="line">     m    <span class="number">4</span></span><br><span class="line">     n    <span class="number">5</span></span><br><span class="line">     o    <span class="number">6</span></span><br><span class="line">Name: a, dtype: int64</span><br><span class="line">    </span><br><span class="line">x[<span class="string">"one"</span>, <span class="string">"h"</span>]</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><p>x.swaplevel() 复合索引中交换索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">x = x.swaplevel() </span><br><span class="line">x</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">d  c  </span><br><span class="line">h  one    <span class="number">0</span></span><br><span class="line">j  one    <span class="number">1</span></span><br><span class="line">k  one    <span class="number">2</span></span><br><span class="line">l  two    <span class="number">3</span></span><br><span class="line">m  two    <span class="number">4</span></span><br><span class="line">n  two    <span class="number">5</span></span><br><span class="line">o  two    <span class="number">6</span></span><br><span class="line">Name: a, dtype: int64</span><br></pre></td></tr></table></figure><h4 id="pandas中的时间序列"><a href="#pandas中的时间序列" class="headerlink" title="pandas中的时间序列"></a>pandas中的时间序列</h4><h5 id="时间序列的生成"><a href="#时间序列的生成" class="headerlink" title="时间序列的生成"></a>时间序列的生成</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.date_range(start=<span class="literal">None</span>, end=<span class="literal">None</span>, periods=<span class="literal">None</span>, freq=<span class="string">'D'</span>)</span><br></pre></td></tr></table></figure><p>start和end以及freq配合能够生成start和end范围内以频率freq的一组时间索引<br>start和periods以及freq配合能够生成从start开始的频率为freq的periods个时间索引</p><p><img src="/2020/05/16/python/numpy%E5%92%8Cpandas/%E7%94%9F%E6%88%90%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97.png" alt></p><p>关于频率的更多缩写</p><p><img src="/2020/05/16/python/numpy%E5%92%8Cpandas/%E5%85%B3%E4%BA%8E%E9%A2%91%E7%8E%87%E7%9A%84%E6%9B%B4%E5%A4%9A%E7%BC%A9%E5%86%99.png" alt></p><h5 id="在DataFrame中使用时间序列"><a href="#在DataFrame中使用时间序列" class="headerlink" title="在DataFrame中使用时间序列"></a>在DataFrame中使用时间序列</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">index=pd.date_range(<span class="string">"20170101"</span>,periods=<span class="number">10</span>)</span><br><span class="line">df = pd.DataFrame(np.random.rand(<span class="number">10</span>),index=index)</span><br></pre></td></tr></table></figure><p>可以使用pandas提供的方法把时间字符串转化为时间序列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">"timeStamp"</span>] = pd.to_datetime(df[<span class="string">"timeStamp"</span>],format=<span class="string">""</span>)format参数大部分情况下可以不用写，但是对于pandas无法格式化的时间字符串，我们可以使用该参数，比如包含中文</span><br></pre></td></tr></table></figure><h5 id="pandas重采样"><a href="#pandas重采样" class="headerlink" title="pandas重采样"></a>pandas重采样</h5><p>重采样：指的是将时间序列从一个频率转化为另一个频率进行处理的过程，将高频率数据转化为低频率数据为降采样，低频率转化为高频率为升采样。</p><p>pandas提供了一个resample的方法来帮助我们实现频率转化</p><p><img src="/2020/05/16/python/numpy%E5%92%8Cpandas/%E9%87%8D%E9%87%87%E6%A0%B7.png" alt></p><h5 id="Periodlndex"><a href="#Periodlndex" class="headerlink" title="Periodlndex"></a>Periodlndex</h5><p>之前所学习的DatetimeIndex可以理解为时间戳<br>那么现在我们要学习的PeriodIndex可以理解为时间段</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">periods = pd.PeriodIndex(year=data[<span class="string">"year"</span>],month=data[<span class="string">"month"</span>],day=data[<span class="string">"day"</span>],hour=data[<span class="string">"hour"</span>],freq=<span class="string">"H"</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;numpy&quot;&gt;&lt;a href=&quot;#numpy&quot; class=&quot;headerlink&quot; title=&quot;numpy&quot;&gt;&lt;/a&gt;numpy&lt;/h1&gt;&lt;h4 id=&quot;创建数组&quot;&gt;&lt;a href=&quot;#创建数组&quot; class=&quot;headerlink&quot; title=&quot;创建数组&quot;
      
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
      <category term="numpy" scheme="http://yoursite.com/categories/python/numpy/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="numpy" scheme="http://yoursite.com/tags/numpy/"/>
    
      <category term="pandas" scheme="http://yoursite.com/tags/pandas/"/>
    
  </entry>
  
  <entry>
    <title>常用反爬手段和解决办法</title>
    <link href="http://yoursite.com/2020/05/16/python/%E5%B8%B8%E7%94%A8%E5%8F%8D%E7%88%AC%E6%89%8B%E6%AE%B5%E5%92%8C%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>http://yoursite.com/2020/05/16/python/%E5%B8%B8%E7%94%A8%E5%8F%8D%E7%88%AC%E6%89%8B%E6%AE%B5%E5%92%8C%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</id>
    <published>2020-05-16T01:05:57.000Z</published>
    <updated>2020-05-16T02:19:07.651Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1、通过headers中的User-Agent字段来反爬"><a href="#1、通过headers中的User-Agent字段来反爬" class="headerlink" title="1、通过headers中的User-Agent字段来反爬"></a>1、通过headers中的User-Agent字段来反爬</h4><p>解决办法：随机选择User-Agent</p><h4 id="2、通过referer字段或者是其他字段来反爬"><a href="#2、通过referer字段或者是其他字段来反爬" class="headerlink" title="2、通过referer字段或者是其他字段来反爬"></a>2、通过referer字段或者是其他字段来反爬</h4><p>解决办法：设置headers里的相应字段</p><h4 id="3、通过cookie来反爬"><a href="#3、通过cookie来反爬" class="headerlink" title="3、通过cookie来反爬"></a>3、通过cookie来反爬</h4><ul><li>方法1、session<ul><li>实例化session（session具有的方法和requests一样）</li><li>session发送请求post请求，对方服务器设置的cookie会保存在session</li><li>session请求登录后能够访问的页面</li></ul></li><li>方法2、cookie放在headers中<ul><li>headers = {“Cookie”:”cookie字符串”}</li></ul></li><li>方法3、cookie转化为字典放在请求方法中<ul><li>requests.get(url,cookies={“name的值”:”values的值”})</li></ul></li></ul><p>注意：</p><ul><li>如果不需要登录时，需要携带cookie，也可以使用上述方法，而有时携带cookie反而容易被识别为爬虫</li><li>如果cookie过期时间比较久或者过期前就可以拿到想要的全部数据，一般才会使用方法2和方法3</li><li>如果需要登录，一般使用一个账户和密码多次请求是容易被识别为爬虫的，可以准备多个账号，通过一个程序获取账号对应的cookie，组成cookie池，爬虫程序使用这些cookie</li><li>scrapy会在下一次请求时自动携带上一次的cookie，如果需要登录，也可以在请求时携带已登录的cookie，或者用scrapy.FormRequest或scrapy.FormRequest.from_response(form表单有action时)发送post请求</li></ul><h4 id="4、发送请求需要添加参数"><a href="#4、发送请求需要添加参数" class="headerlink" title="4、发送请求需要添加参数"></a>4、发送请求需要添加参数</h4><p>参数可能是发送其他url请求获取的，或者在页面响应中，此时需要我们用chrome的search file查找</p><h4 id="5、通过js来反爬"><a href="#5、通过js来反爬" class="headerlink" title="5、通过js来反爬"></a>5、通过js来反爬</h4><ul><li><p>通过js实现跳转来反爬</p><ul><li>在请求目标网站的时候，我们看到的似乎就请求了一个网站，然而实际上在成功请求目标网站之前，中间可能有通过js实现的跳转，我们肉眼不可见，这个时候可以通过点击perserve log按钮实现观察页面跳转情况</li><li>在这些请求中，如果请求数量很多，一般来讲，只有那些response中带cookie字段的请求是有用的，意味着通过这个请求，对方服务器有设置cookie到本地</li></ul></li><li><p>通过js生成了请求参数</p><ul><li>对应的需要分析js，观察参数生成的实现过程</li><li>可以使用selenium模块解决</li></ul></li><li><p>通过js实现了数据的加密</p><ul><li>对应的需要分析js，观察加密的实现过程</li><li>可以使用selenium模块解决</li></ul></li></ul><h4 id="6、通过验证码来反爬"><a href="#6、通过验证码来反爬" class="headerlink" title="6、通过验证码来反爬"></a>6、通过验证码来反爬</h4><p>通过打码平台来识别验证码</p><h4 id="7、基于用户行为反爬虫"><a href="#7、基于用户行为反爬虫" class="headerlink" title="7、基于用户行为反爬虫"></a>7、基于用户行为反爬虫</h4><ul><li>还有一部分网站是通过检测用户行为，例如同一IP短时间内多次访问同一页面，或者同一账户短时间内多次进行相同操作。</li><li>大多数网站都是前一种情况，对于这种情况，使用IP代理就可以解决。可以专门写一个爬虫，爬取网上公开的代理ip，检测后全部保存起来。</li><li>对于第二种情况，可以在每次请求后随机间隔几秒再进行下一次请求。有些有逻辑漏洞的网站，可以通过请求几次，退出登录，重新登录，继续请求来绕过同一账号短时间内不能多次进行相同请求的限制。</li></ul><h4 id="8、通过自定义字体来反爬"><a href="#8、通过自定义字体来反爬" class="headerlink" title="8、通过自定义字体来反爬"></a>8、通过自定义字体来反爬</h4><p>切换到手机版</p><h4 id="9、通过css来反爬"><a href="#9、通过css来反爬" class="headerlink" title="9、通过css来反爬"></a>9、通过css来反爬</h4><p>计算css的偏移</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1、通过headers中的User-Agent字段来反爬&quot;&gt;&lt;a href=&quot;#1、通过headers中的User-Agent字段来反爬&quot; class=&quot;headerlink&quot; title=&quot;1、通过headers中的User-Agent字段来反爬&quot;&gt;&lt;/a&gt;1、
      
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
      <category term="爬虫" scheme="http://yoursite.com/categories/python/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="反爬" scheme="http://yoursite.com/tags/%E5%8F%8D%E7%88%AC/"/>
    
  </entry>
  
</feed>
